
C:\Users\bkute\AppData\Local\Temp\VMBuilds\auto_cat_feeder\teensy41\Debug/auto_cat_feeder.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001030 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001030:	4b77      	ldr	r3, [pc, #476]	; (60001210 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001032:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001036:	4a77      	ldr	r2, [pc, #476]	; (60001214 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001038:	4877      	ldr	r0, [pc, #476]	; (60001218 <ResetHandler+0x1e8>)
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
6000103a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x4a>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f8>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x4a>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3e>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1fc>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x200>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x72>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x204>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x72>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x66>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x208>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x20c>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x92>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x8a>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x210>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x214>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0xa2>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x220>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xb0>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x224>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fa:	4b58      	ldr	r3, [pc, #352]	; (6000125c <ResetHandler+0x22c>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 6000129c <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001100:	f8df 819c 	ldr.w	r8, [pc, #412]	; 600012a0 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001104:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001108:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001110:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001114:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001118:	69f3      	ldr	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000111a:	493d      	ldr	r1, [pc, #244]	; (60001210 <ResetHandler+0x1e0>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b3 	bl	600012a4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x230>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 fae2 	bl	60001744 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fc51 	bl	60001a38 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001196:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001198:	4a3b      	ldr	r2, [pc, #236]	; (60001288 <ResetHandler+0x258>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119a:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119e:	4b3b      	ldr	r3, [pc, #236]	; (6000128c <ResetHandler+0x25c>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a0:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a2:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a4:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a8:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011ac:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b0:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011b6:	07d2      	lsls	r2, r2, #31
600011b8:	d408      	bmi.n	600011cc <ResetHandler+0x19c>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ba:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011be:	4934      	ldr	r1, [pc, #208]	; (60001290 <ResetHandler+0x260>)
600011c0:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011c6:	f042 0201 	orr.w	r2, r2, #1
600011ca:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011cc:	4a2f      	ldr	r2, [pc, #188]	; (6000128c <ResetHandler+0x25c>)
600011ce:	4c31      	ldr	r4, [pc, #196]	; (60001294 <ResetHandler+0x264>)
600011d0:	6893      	ldr	r3, [r2, #8]
600011d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011d6:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011d8:	f000 f8d6 	bl	60001388 <configure_external_ram>
#endif
	startup_early_hook();
600011dc:	f000 fc40 	bl	60001a60 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e0:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e2:	2b13      	cmp	r3, #19
600011e4:	d9fc      	bls.n	600011e0 <ResetHandler+0x1b0>
	usb_init();
600011e6:	f000 fb6d 	bl	600018c4 <usb_init>
	analog_init();
600011ea:	f000 fbe1 	bl	600019b0 <analog_init>
	pwm_init();
600011ee:	f000 fc27 	bl	60001a40 <__pwm_init_veneer>
	tempmon_init();
600011f2:	f000 fad9 	bl	600017a8 <tempmon_init>

	startup_late_hook();
600011f6:	f000 fc27 	bl	60001a48 <__startup_late_hook_veneer>
600011fa:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001200:	d3fb      	bcc.n	600011fa <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001202:	f000 fc15 	bl	60001a30 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001206:	f000 fc0b 	bl	60001a20 <__main_veneer>
	
	while (1) asm("WFI");
6000120a:	bf30      	wfi
6000120c:	e7fd      	b.n	6000120a <ResetHandler+0x1da>
6000120e:	bf00      	nop
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001b4c 	.word	0x60001b4c
60001228:	00002660 	.word	0x00002660
6000122c:	20000000 	.word	0x20000000
60001230:	600041b0 	.word	0x600041b0
60001234:	20000b90 	.word	0x20000b90
60001238:	20000b90 	.word	0x20000b90
6000123c:	200032c0 	.word	0x200032c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200013fc 	.word	0x200013fc
60001248:	00000825 	.word	0x00000825
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	000019d1 	.word	0x000019d1
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	000019d5 	.word	0x000019d5
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20000c0c 	.word	0x20000c0c
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20000c14 	.word	0x20000c14
60001298:	20001400 	.word	0x20001400
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a6:	4a24      	ldr	r2, [pc, #144]	; (60001338 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012aa:	4b24      	ldr	r3, [pc, #144]	; (6000133c <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012ac:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	4c23      	ldr	r4, [pc, #140]	; (60001340 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b2:	2611      	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001380 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012b8:	2712      	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ba:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012bc:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012be:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c2:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012c6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012c8:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 60001384 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012cc:	4e1d      	ldr	r6, [pc, #116]	; (60001344 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ce:	f8c3 e000 	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012d2:	491d      	ldr	r1, [pc, #116]	; (60001348 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d4:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d6:	601e      	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012d8:	f041 0115 	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012dc:	4f1b      	ldr	r7, [pc, #108]	; (6000134c <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012de:	4e1c      	ldr	r6, [pc, #112]	; (60001350 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012e0:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	4f1b      	ldr	r7, [pc, #108]	; (60001354 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e6:	4e1c      	ldr	r6, [pc, #112]	; (60001358 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e8:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	601e      	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012ec:	4f1b      	ldr	r7, [pc, #108]	; (6000135c <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012ee:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f0:	4e1b      	ldr	r6, [pc, #108]	; (60001360 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f2:	491c      	ldr	r1, [pc, #112]	; (60001364 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f6:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012f8:	4f1b      	ldr	r7, [pc, #108]	; (60001368 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012fa:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012fc:	4e1b      	ldr	r6, [pc, #108]	; (6000136c <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600012fe:	491c      	ldr	r1, [pc, #112]	; (60001370 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001304:	4f1b      	ldr	r7, [pc, #108]	; (60001374 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001306:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001308:	4e1b      	ldr	r6, [pc, #108]	; (60001378 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000130a:	491c      	ldr	r1, [pc, #112]	; (6000137c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000130c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000130e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001310:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001312:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001314:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001318:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000131c:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001320:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001324:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001328:	f852 3c88 	ldr.w	r3, [r2, #-136]
6000132c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001330:	f842 3c88 	str.w	r3, [r2, #-136]
60001334:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001336:	bf00      	nop
60001338:	e000ed9c 	.word	0xe000ed9c
6000133c:	e000eda0 	.word	0xe000eda0
60001340:	e000ed94 	.word	0xe000ed94
60001344:	00100009 	.word	0x00100009
60001348:	200032c0 	.word	0x200032c0
6000134c:	00200013 	.word	0x00200013
60001350:	07020021 	.word	0x07020021
60001354:	20000014 	.word	0x20000014
60001358:	13080025 	.word	0x13080025
6000135c:	10000009 	.word	0x10000009
60001360:	20200016 	.word	0x20200016
60001364:	130b0027 	.word	0x130b0027
60001368:	40000017 	.word	0x40000017
6000136c:	13100033 	.word	0x13100033
60001370:	60000018 	.word	0x60000018
60001374:	070b002f 	.word	0x070b002f
60001378:	70000019 	.word	0x70000019
6000137c:	130b002f 	.word	0x130b002f
60001380:	1000003f 	.word	0x1000003f
60001384:	03080025 	.word	0x03080025

60001388 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001388:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000138a:	4b8d      	ldr	r3, [pc, #564]	; (600015c0 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000138c:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000138e:	4e8d      	ldr	r6, [pc, #564]	; (600015c4 <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001390:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001392:	498d      	ldr	r1, [pc, #564]	; (600015c8 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001394:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001398:	4d8c      	ldr	r5, [pc, #560]	; (600015cc <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000139a:	f04f 37ff 	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000139e:	4c8c      	ldr	r4, [pc, #560]	; (600015d0 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	b083      	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013a6:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013aa:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013ac:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b0:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013b4:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013b8:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013bc:	4985      	ldr	r1, [pc, #532]	; (600015d4 <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013be:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013c2:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013c6:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013ca:	4e83      	ldr	r6, [pc, #524]	; (600015d8 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013cc:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013ce:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013d0:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013d2:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013d4:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013e2:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600013ea:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600013ee:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600013f2:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600013f6:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600013fa:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600013fe:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001400:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001402:	4876      	ldr	r0, [pc, #472]	; (600015dc <configure_external_ram+0x254>)
60001404:	4018      	ands	r0, r3
60001406:	4b76      	ldr	r3, [pc, #472]	; (600015e0 <configure_external_ram+0x258>)
60001408:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000140a:	4876      	ldr	r0, [pc, #472]	; (600015e4 <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000140c:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000140e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001412:	f043 030c 	orr.w	r3, r3, #12
60001416:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000141a:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000141c:	6803      	ldr	r3, [r0, #0]
6000141e:	4333      	orrs	r3, r6
60001420:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001422:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001424:	ea03 0e0e 	and.w	lr, r3, lr
60001428:	4b6f      	ldr	r3, [pc, #444]	; (600015e8 <configure_external_ram+0x260>)
6000142a:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000142e:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 60001620 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001432:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001434:	4b6d      	ldr	r3, [pc, #436]	; (600015ec <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001436:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001438:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000143c:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000143e:	4f6c      	ldr	r7, [pc, #432]	; (600015f0 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001446:	68c3      	ldr	r3, [r0, #12]
60001448:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000144c:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000144e:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001450:	401f      	ands	r7, r3
60001452:	4b68      	ldr	r3, [pc, #416]	; (600015f4 <configure_external_ram+0x26c>)
60001454:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001456:	4f66      	ldr	r7, [pc, #408]	; (600015f0 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001458:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000145a:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000145c:	401f      	ands	r7, r3
6000145e:	4b65      	ldr	r3, [pc, #404]	; (600015f4 <configure_external_ram+0x26c>)
60001460:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001462:	4f65      	ldr	r7, [pc, #404]	; (600015f8 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001466:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001468:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000146a:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000146e:	4f63      	ldr	r7, [pc, #396]	; (600015fc <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001474:	f043 0301 	orr.w	r3, r3, #1
60001478:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000147c:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001480:	f8df e184 	ldr.w	lr, [pc, #388]	; 60001608 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001488:	f043 0301 	orr.w	r3, r3, #1
6000148c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001490:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001492:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001494:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001496:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000149a:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000149c:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000149e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014a2:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014a4:	4b56      	ldr	r3, [pc, #344]	; (60001600 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014a6:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014aa:	4a56      	ldr	r2, [pc, #344]	; (60001604 <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014ac:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014ae:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014b2:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014b4:	f843 1b04 	str.w	r1, [r3], #4
600014b8:	4293      	cmp	r3, r2
600014ba:	d1fb      	bne.n	600014b4 <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014bc:	4b49      	ldr	r3, [pc, #292]	; (600015e4 <configure_external_ram+0x25c>)
600014be:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014c0:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014c2:	f042 0201 	orr.w	r2, r2, #1
600014c6:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014c8:	680b      	ldr	r3, [r1, #0]
600014ca:	4a46      	ldr	r2, [pc, #280]	; (600015e4 <configure_external_ram+0x25c>)
600014cc:	f013 0301 	ands.w	r3, r3, #1
600014d0:	d1fa      	bne.n	600014c8 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014d2:	4e4d      	ldr	r6, [pc, #308]	; (60001608 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014d4:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014d6:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014da:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014de:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014e2:	4f4a      	ldr	r7, [pc, #296]	; (6000160c <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e4:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014e6:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600014ec:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014f0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600014f4:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f8:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600014fc:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014fe:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001502:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001504:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001508:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
6000150c:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001510:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001514:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001518:	4e3d      	ldr	r6, [pc, #244]	; (60001610 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000151a:	4d3e      	ldr	r5, [pc, #248]	; (60001614 <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151c:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001520:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001524:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001528:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000152c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001530:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001534:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001538:	694b      	ldr	r3, [r1, #20]
6000153a:	4a2a      	ldr	r2, [pc, #168]	; (600015e4 <configure_external_ram+0x25c>)
6000153c:	07dd      	lsls	r5, r3, #31
6000153e:	d5fb      	bpl.n	60001538 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001540:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001544:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001548:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000154a:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000154c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001550:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001554:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001558:	694b      	ldr	r3, [r1, #20]
6000155a:	4a22      	ldr	r2, [pc, #136]	; (600015e4 <configure_external_ram+0x25c>)
6000155c:	07dc      	lsls	r4, r3, #31
6000155e:	d5fb      	bpl.n	60001558 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001564:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001568:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000156a:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000156c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001570:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001574:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001578:	694b      	ldr	r3, [r1, #20]
6000157a:	4a1a      	ldr	r2, [pc, #104]	; (600015e4 <configure_external_ram+0x25c>)
6000157c:	07d8      	lsls	r0, r3, #31
6000157e:	d5fb      	bpl.n	60001578 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001584:	4824      	ldr	r0, [pc, #144]	; (60001618 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001586:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001588:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000158a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000158e:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001592:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001596:	694b      	ldr	r3, [r1, #20]
60001598:	4a12      	ldr	r2, [pc, #72]	; (600015e4 <configure_external_ram+0x25c>)
6000159a:	07db      	lsls	r3, r3, #31
6000159c:	d5fb      	bpl.n	60001596 <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
6000159e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015a2:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015a6:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015a8:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015aa:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015ac:	428b      	cmp	r3, r1
600015ae:	d039      	beq.n	60001624 <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600015b0:	4b1a      	ldr	r3, [pc, #104]	; (6000161c <configure_external_ram+0x294>)
600015b2:	2200      	movs	r2, #0
600015b4:	601a      	str	r2, [r3, #0]
600015b6:	605a      	str	r2, [r3, #4]
600015b8:	609a      	str	r2, [r3, #8]
600015ba:	60da      	str	r2, [r3, #12]
	}
}
600015bc:	b003      	add	sp, #12
600015be:	bdf0      	pop	{r4, r5, r6, r7, pc}
600015c0:	401f8000 	.word	0x401f8000
600015c4:	000170f9 	.word	0x000170f9
600015c8:	0001b0f9 	.word	0x0001b0f9
600015cc:	000110f9 	.word	0x000110f9
600015d0:	000100f9 	.word	0x000100f9
600015d4:	401f8400 	.word	0x401f8400
600015d8:	400fc000 	.word	0x400fc000
600015dc:	1ffffcff 	.word	0x1ffffcff
600015e0:	a0000300 	.word	0xa0000300
600015e4:	402a4000 	.word	0x402a4000
600015e8:	ffff0012 	.word	0xffff0012
600015ec:	00f737ff 	.word	0x00f737ff
600015f0:	7cf0ff00 	.word	0x7cf0ff00
600015f4:	80000040 	.word	0x80000040
600015f8:	830f00ff 	.word	0x830f00ff
600015fc:	00020063 	.word	0x00020063
60001600:	402a4200 	.word	0x402a4200
60001604:	402a4300 	.word	0x402a4300
60001608:	5af05af0 	.word	0x5af05af0
6000160c:	3018049f 	.word	0x3018049f
60001610:	26013206 	.word	0x26013206
60001614:	0a180638 	.word	0x0a180638
60001618:	00030004 	.word	0x00030004
6000161c:	20001000 	.word	0x20001000
60001620:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001624:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001626:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000162a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000162c:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001632:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001636:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000163a:	694b      	ldr	r3, [r1, #20]
6000163c:	4a3b      	ldr	r2, [pc, #236]	; (6000172c <configure_external_ram+0x3a4>)
6000163e:	07df      	lsls	r7, r3, #31
60001640:	d5fb      	bpl.n	6000163a <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001642:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001644:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001648:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000164a:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164c:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001652:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001656:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000165a:	694b      	ldr	r3, [r1, #20]
6000165c:	4a33      	ldr	r2, [pc, #204]	; (6000172c <configure_external_ram+0x3a4>)
6000165e:	07de      	lsls	r6, r3, #31
60001660:	d5fb      	bpl.n	6000165a <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001662:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001664:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001668:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000166c:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000166e:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001670:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001674:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001678:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000167c:	694b      	ldr	r3, [r1, #20]
6000167e:	4a2b      	ldr	r2, [pc, #172]	; (6000172c <configure_external_ram+0x3a4>)
60001680:	07dd      	lsls	r5, r3, #31
60001682:	d5fb      	bpl.n	6000167c <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001684:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001686:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000168a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000168e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001690:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001692:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001696:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000169a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000169e:	694b      	ldr	r3, [r1, #20]
600016a0:	4a22      	ldr	r2, [pc, #136]	; (6000172c <configure_external_ram+0x3a4>)
600016a2:	07dc      	lsls	r4, r3, #31
600016a4:	d5fb      	bpl.n	6000169e <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016a6:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016a8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600016ac:	4820      	ldr	r0, [pc, #128]	; (60001730 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016ae:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016b0:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016b2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600016b6:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016ba:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016be:	694b      	ldr	r3, [r1, #20]
600016c0:	4a1a      	ldr	r2, [pc, #104]	; (6000172c <configure_external_ram+0x3a4>)
600016c2:	07d8      	lsls	r0, r3, #31
600016c4:	d5fb      	bpl.n	600016be <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
600016c6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600016ca:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016ce:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600016d0:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016d2:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600016d4:	428b      	cmp	r3, r1
600016d6:	d010      	beq.n	600016fa <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
600016d8:	4b16      	ldr	r3, [pc, #88]	; (60001734 <configure_external_ram+0x3ac>)
600016da:	2208      	movs	r2, #8
600016dc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
600016e0:	701a      	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600016e2:	4915      	ldr	r1, [pc, #84]	; (60001738 <configure_external_ram+0x3b0>)
600016e4:	2000      	movs	r0, #0
600016e6:	4a15      	ldr	r2, [pc, #84]	; (6000173c <configure_external_ram+0x3b4>)
600016e8:	2301      	movs	r3, #1
600016ea:	9000      	str	r0, [sp, #0]
600016ec:	1a52      	subs	r2, r2, r1
600016ee:	4814      	ldr	r0, [pc, #80]	; (60001740 <configure_external_ram+0x3b8>)
600016f0:	4422      	add	r2, r4
600016f2:	f000 f999 	bl	60001a28 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
600016f6:	b003      	add	sp, #12
600016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016fa:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016fe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001702:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001704:	4610      	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001706:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000170a:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000170e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001712:	6943      	ldr	r3, [r0, #20]
60001714:	4905      	ldr	r1, [pc, #20]	; (6000172c <configure_external_ram+0x3a4>)
60001716:	07db      	lsls	r3, r3, #31
60001718:	d5fb      	bpl.n	60001712 <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000171a:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000171c:	4b05      	ldr	r3, [pc, #20]	; (60001734 <configure_external_ram+0x3ac>)
6000171e:	2210      	movs	r2, #16
60001720:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001724:	6148      	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001726:	701a      	strb	r2, [r3, #0]
60001728:	e7db      	b.n	600016e2 <configure_external_ram+0x35a>
6000172a:	bf00      	nop
6000172c:	402a4000 	.word	0x402a4000
60001730:	00030004 	.word	0x00030004
60001734:	20000c18 	.word	0x20000c18
60001738:	70000000 	.word	0x70000000
6000173c:	70000000 	.word	0x70000000
60001740:	20001000 	.word	0x20001000

60001744 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001744:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001746:	4a17      	ldr	r2, [pc, #92]	; (600017a4 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001748:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000174a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000174e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001756:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000175a:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000175e:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001760:	f013 0f02 	tst.w	r3, #2
60001764:	d006      	beq.n	60001774 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001766:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001768:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000176a:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000176c:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000176e:	f013 0f02 	tst.w	r3, #2
60001772:	d1f8      	bne.n	60001766 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001774:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001778:	d101      	bne.n	6000177e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000177a:	6155      	str	r5, [r2, #20]
			continue;
6000177c:	e7ef      	b.n	6000175e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000177e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001782:	d101      	bne.n	60001788 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001784:	6156      	str	r6, [r2, #20]
			continue;
60001786:	e7ea      	b.n	6000175e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001788:	2b00      	cmp	r3, #0
6000178a:	dae8      	bge.n	6000175e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000178c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001790:	d001      	beq.n	60001796 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001792:	6191      	str	r1, [r2, #24]
			continue;
60001794:	e7e3      	b.n	6000175e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001796:	065b      	lsls	r3, r3, #25
60001798:	d401      	bmi.n	6000179e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000179a:	6157      	str	r7, [r2, #20]
			continue;
6000179c:	e7df      	b.n	6000175e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000179e:	bcf0      	pop	{r4, r5, r6, r7}
600017a0:	4770      	bx	lr
600017a2:	bf00      	nop
600017a4:	400d8000 	.word	0x400d8000

600017a8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017a8:	4a3b      	ldr	r2, [pc, #236]	; (60001898 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017aa:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017ae:	493b      	ldr	r1, [pc, #236]	; (6000189c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017b0:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017b2:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017b6:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ba:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017bc:	f8df e100 	ldr.w	lr, [pc, #256]	; 600018c0 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017c0:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017c2:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017c6:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017ca:	4f35      	ldr	r7, [pc, #212]	; (600018a0 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017cc:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600017ce:	f3c3 240b 	ubfx	r4, r3, #8, #12
600017d2:	4e34      	ldr	r6, [pc, #208]	; (600018a4 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017d4:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017d8:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017dc:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600017e0:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600017e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017e8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017ec:	ee07 4a90 	vmov	s15, r4
600017f0:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600017f4:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600017f6:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600017fe:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001802:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001804:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000180c:	4d26      	ldr	r5, [pc, #152]	; (600018a8 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000180e:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001812:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001814:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000181e:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001822:	4e22      	ldr	r6, [pc, #136]	; (600018ac <tempmon_init+0x104>)
60001824:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001826:	4922      	ldr	r1, [pc, #136]	; (600018b0 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001828:	4c22      	ldr	r4, [pc, #136]	; (600018b4 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000182a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000182e:	ee07 3a90 	vmov	s15, r3
60001832:	4b21      	ldr	r3, [pc, #132]	; (600018b8 <tempmon_init+0x110>)
60001834:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
6000183c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001840:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001848:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000184c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001850:	ee15 3a90 	vmov	r3, s11
60001854:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001858:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000185c:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001860:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001862:	ea01 4105 	and.w	r1, r1, r5, lsl #16
60001866:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000186a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000186e:	430b      	orrs	r3, r1
60001870:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001874:	ee17 3a90 	vmov	r3, s15
60001878:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
6000187c:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001880:	430b      	orrs	r3, r1
60001882:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001886:	6813      	ldr	r3, [r2, #0]
60001888:	f043 0302 	orr.w	r3, r3, #2
6000188c:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000188e:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001890:	4b0a      	ldr	r3, [pc, #40]	; (600018bc <tempmon_init+0x114>)
60001892:	2201      	movs	r2, #1
60001894:	601a      	str	r2, [r3, #0]
60001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001898:	400d8180 	.word	0x400d8180
6000189c:	401f4400 	.word	0x401f4400
600018a0:	20000c24 	.word	0x20000c24
600018a4:	20000c28 	.word	0x20000c28
600018a8:	20000c20 	.word	0x20000c20
600018ac:	20001400 	.word	0x20001400
600018b0:	0fff0000 	.word	0x0fff0000
600018b4:	e000e440 	.word	0xe000e440
600018b8:	000008d1 	.word	0x000008d1
600018bc:	e000e108 	.word	0xe000e108
600018c0:	20000c1c 	.word	0x20000c1c

600018c4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018c4:	4b30      	ldr	r3, [pc, #192]	; (60001988 <usb_init+0xc4>)
600018c6:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600018ca:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600018cc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018d0:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600018d4:	f000 f8a0 	bl	60001a18 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018d8:	492c      	ldr	r1, [pc, #176]	; (6000198c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018da:	482d      	ldr	r0, [pc, #180]	; (60001990 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018dc:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018e0:	4c2c      	ldr	r4, [pc, #176]	; (60001994 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018e2:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018e6:	4b2c      	ldr	r3, [pc, #176]	; (60001998 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600018e8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600018ec:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600018f0:	6822      	ldr	r2, [r4, #0]
600018f2:	4013      	ands	r3, r2
600018f4:	b91b      	cbnz	r3, 600018fe <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600018f6:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600018fa:	079a      	lsls	r2, r3, #30
600018fc:	d01a      	beq.n	60001934 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600018fe:	4b24      	ldr	r3, [pc, #144]	; (60001990 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001900:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001904:	4a23      	ldr	r2, [pc, #140]	; (60001994 <usb_init+0xd0>)
60001906:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001908:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000190a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
6000190e:	f041 0102 	orr.w	r1, r1, #2
60001912:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001916:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000191a:	079b      	lsls	r3, r3, #30
6000191c:	d4fb      	bmi.n	60001916 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000191e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001922:	491e      	ldr	r1, [pc, #120]	; (6000199c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001924:	4b1b      	ldr	r3, [pc, #108]	; (60001994 <usb_init+0xd0>)
60001926:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000192a:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000192c:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000192e:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001930:	f000 f88e 	bl	60001a50 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001934:	4d1a      	ldr	r5, [pc, #104]	; (600019a0 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001936:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001938:	4b16      	ldr	r3, [pc, #88]	; (60001994 <usb_init+0xd0>)
6000193a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000193e:	4c14      	ldr	r4, [pc, #80]	; (60001990 <usb_init+0xcc>)
60001940:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001942:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001944:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001946:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001948:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000194a:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000194e:	f44f 7220 	mov.w	r2, #640	; 0x280
60001952:	f000 f881 	bl	60001a58 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001956:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000195a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000195e:	f240 1343 	movw	r3, #323	; 0x143
60001962:	4a10      	ldr	r2, [pc, #64]	; (600019a4 <usb_init+0xe0>)
60001964:	4910      	ldr	r1, [pc, #64]	; (600019a8 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001966:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001968:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000196a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
6000196e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001972:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001976:	4a0d      	ldr	r2, [pc, #52]	; (600019ac <usb_init+0xe8>)
60001978:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000197c:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000197e:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001980:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001984:	bd70      	pop	{r4, r5, r6, pc}
60001986:	bf00      	nop
60001988:	400d8000 	.word	0x400d8000
6000198c:	400fc000 	.word	0x400fc000
60001990:	402e0000 	.word	0x402e0000
60001994:	400d9000 	.word	0x400d9000
60001998:	001e1c00 	.word	0x001e1c00
6000199c:	e000e28c 	.word	0xe000e28c
600019a0:	20003000 	.word	0x20003000
600019a4:	20001400 	.word	0x20001400
600019a8:	00000a3d 	.word	0x00000a3d
600019ac:	e000e10c 	.word	0xe000e10c

600019b0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019b0:	4b11      	ldr	r3, [pc, #68]	; (600019f8 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019b2:	4912      	ldr	r1, [pc, #72]	; (600019fc <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019b4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019b6:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019b8:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600019bc:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019be:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019c0:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019c4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019c6:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019c8:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600019cc:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019ce:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019d0:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019d2:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019d4:	061b      	lsls	r3, r3, #24
600019d6:	d4fc      	bmi.n	600019d2 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019d8:	4b09      	ldr	r3, [pc, #36]	; (60001a00 <analog_init+0x50>)
600019da:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019de:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019e0:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019e2:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019e4:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600019e8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600019ec:	d1fb      	bne.n	600019e6 <analog_init+0x36>
	calibrating = 0;
600019ee:	4a05      	ldr	r2, [pc, #20]	; (60001a04 <analog_init+0x54>)
600019f0:	7013      	strb	r3, [r2, #0]
}
600019f2:	bc30      	pop	{r4, r5}
600019f4:	4770      	bx	lr
600019f6:	bf00      	nop
600019f8:	400fc000 	.word	0x400fc000
600019fc:	400c4000 	.word	0x400c4000
60001a00:	400c8000 	.word	0x400c8000
60001a04:	20000e52 	.word	0x20000e52

60001a08 <_init>:
60001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001a0a:	bf00      	nop
60001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001a0e:	bc08      	pop	{r3}
60001a10:	469e      	mov	lr, r3
60001a12:	4770      	bx	lr
60001a14:	0000      	movs	r0, r0
	...

60001a18 <__usb_init_serialnumber_veneer>:
60001a18:	f85f f000 	ldr.w	pc, [pc]	; 60001a1c <__usb_init_serialnumber_veneer+0x4>
60001a1c:	000011f5 	.word	0x000011f5

60001a20 <__main_veneer>:
60001a20:	f85f f000 	ldr.w	pc, [pc]	; 60001a24 <__main_veneer+0x4>
60001a24:	000019f5 	.word	0x000019f5

60001a28 <__sm_set_pool_veneer>:
60001a28:	f85f f000 	ldr.w	pc, [pc]	; 60001a2c <__sm_set_pool_veneer+0x4>
60001a2c:	0000230d 	.word	0x0000230d

60001a30 <____libc_init_array_veneer>:
60001a30:	f85f f000 	ldr.w	pc, [pc]	; 60001a34 <____libc_init_array_veneer+0x4>
60001a34:	000023b5 	.word	0x000023b5

60001a38 <__set_arm_clock_veneer>:
60001a38:	f85f f000 	ldr.w	pc, [pc]	; 60001a3c <__set_arm_clock_veneer+0x4>
60001a3c:	00001cf1 	.word	0x00001cf1

60001a40 <__pwm_init_veneer>:
60001a40:	f85f f000 	ldr.w	pc, [pc]	; 60001a44 <__pwm_init_veneer+0x4>
60001a44:	00002005 	.word	0x00002005

60001a48 <__startup_late_hook_veneer>:
60001a48:	f85f f000 	ldr.w	pc, [pc]	; 60001a4c <__startup_late_hook_veneer+0x4>
60001a4c:	00000841 	.word	0x00000841

60001a50 <__delay_veneer>:
60001a50:	f85f f000 	ldr.w	pc, [pc]	; 60001a54 <__delay_veneer+0x4>
60001a54:	00000659 	.word	0x00000659

60001a58 <__memset_veneer>:
60001a58:	f85f f000 	ldr.w	pc, [pc]	; 60001a5c <__memset_veneer+0x4>
60001a5c:	00002439 	.word	0x00002439

60001a60 <__startup_early_hook_veneer>:
60001a60:	f85f f000 	ldr.w	pc, [pc]	; 60001a64 <__startup_early_hook_veneer+0x4>
60001a64:	0000083d 	.word	0x0000083d

60001a68 <__init_array_start>:
60001a68:	00000045 	.word	0x00000045
60001a6c:	00000201 	.word	0x00000201
60001a70:	00000599 	.word	0x00000599

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x11>

    return tmeas;
      28:	b1134b04 	.word	0xb1134b04
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
      2e:	f3af 8000 	nop.w
      32:	2301      	movs	r3, #1
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	20000b90 	.word	0x20000b90
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	2664      	movs	r6, #100	; 0x64
	...

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	push	{r4, lr}
      48:	4908b11b 	.word	0x4908b11b
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	cbnz	r3, 5a <frame_dummy+0x16>
      58:	4b07bd10 	.word	0x4b07bd10
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	4010e8bd 	.word	0x4010e8bd
      64:	4718      	bx	r3
      66:	bf00      	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0b94      	lsrs	r4, r2, #14
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	2664      	movs	r6, #100	; 0x64
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0b90      	lsrs	r0, r2, #14
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	00000000 	.word	0x00000000

0000007c <setup>:
      7c:	b508      	push	{r3, lr}
      7e:	f640 31b8 	movw	r1, #3000	; 0xbb8
      82:	4824      	.short	0x4824
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      84:	f000 f9cc 	bl	420 <VisualMicroDebug::init(unsigned long)>
Bounce pushbutton = Bounce(GO_PIN, 10);  // 10 ms debounce

// the setup function runs once when you press reset or power the board
void setup() {
	pinMode(STEP_PIN, OUTPUT);
	pinMode(SLP_PIN, OUTPUT);
      88:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
      8c:	f0004821 	.word	0xf0004821
      90:	f99d 2101 	ldrsb.w	r2, [sp, #257]	; 0x101
      94:	f000481f 	.word	0xf000481f
      98:	f97b bb70 	ldr??.w	fp, [fp], #112
      9c:	481d2100 	.word	0x481d2100
      a0:	2201      	movs	r2, #1
      a2:	f000      	.short	0xf000
      a4:	fa5b 2101 			; <UNDEFINED> instruction: 0xfa5b2101
      a8:	f000481a 	.word	0xf000481a
      ac:	f971 b130 	ldr??.w	fp, [r1, <undefined>]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      b0:	2106      	movs	r1, #6
      b2:	4819      	.short	0x4819
      b4:	f001 fbe8 	bl	1888 <usb_serial_write>
      b8:	f0004816 	.word	0xf0004816
      bc:	f985 2101 	vst2.8	{d2[0],d3[0]}, [r5], r1
	pinMode(DIRECTION_PIN, OUTPUT);
      c0:	f0002009 	.word	0xf0002009
      c4:	fb6f 2101 	smmls	r1, pc, r1, r2	; <UNPREDICTABLE>
	pinMode(GO_PIN, INPUT_PULLUP);
      c8:	f0002006 	.word	0xf0002006
      cc:	fb6b 2101 	smmls	r1, fp, r1, r2
	digitalWrite(STEP_PIN, LOW);
      d0:	f0002008 	.word	0xf0002008
      d4:	fb67 2102 	smmls	r1, r7, r2, r2
	digitalWrite(DIRECTION_PIN, LOW);
      d8:	2007      	movs	r0, #7
      da:	f000      	.short	0xf000
      dc:	fb63 2100 	smmls	r1, r3, r0, r2
	digitalWrite(SLP_PIN, LOW);
      e0:	f0002009 	.word	0xf0002009
      e4:	fb53 2100 	smmla	r1, r3, r0, r2
}
      e8:	f0002008 	.word	0xf0002008
      ec:	fb4f 2100 	smlsd	r1, pc, r0, r2	; <UNPREDICTABLE>

      f0:	e8bd2006 	.word	0xe8bd2006
// the loop function runs over and over again until power down or reset
      f4:	4008      	ands	r0, r1
	pinMode(GO_PIN, INPUT_PULLUP);
	digitalWrite(STEP_PIN, LOW);
	digitalWrite(DIRECTION_PIN, LOW);
	digitalWrite(SLP_PIN, LOW);
}

      f6:	f000      	.short	0xf000
      f8:	bb49      	cbnz	r1, 14e <loop+0x2e>
      fa:	2110      	movs	r1, #16
      fc:	f0014807 	.word	0xf0014807
     100:	fbc3 210a 	smlal	r2, r1, r3, sl
Bounce pushbutton = Bounce(GO_PIN, 10);  // 10 ms debounce

// the setup function runs once when you press reset or power the board
void setup() {
	pinMode(STEP_PIN, OUTPUT);
	pinMode(SLP_PIN, OUTPUT);
     104:	f0004803 	.word	0xf0004803
     108:	f8b9 4802 	ldrh.w	r4, [r9, #2050]	; 0x802
     10c:	f000 f95c 	bl	3c8 <VisualMicroDebug::outPacketEnd()>
     110:	bf00e7c4 	.word	0xbf00e7c4
     114:	0bc4      	lsrs	r4, r0, #15
     116:	2000      	.short	0x2000
     118:	0014      	movs	r4, r2
     11a:	2000      	.short	0x2000
     11c:	0000      	movs	r0, r0
     11e:	2000      	.short	0x2000

00000120 <loop>:

int steps_per_press = 50;

void loop() 
{
  //move 1 step each high edge on "step"
     120:	b538      	push	{r3, r4, r5, lr}
     122:	4c2f      	.short	0x4c2f
     124:	6823      	ldr	r3, [r4, #0]
     126:	b913      	.short	0xb913
     128:	6823      	ldr	r3, [r4, #0]
     12a:	2b01      	cmp	r3, #1
     12c:	4d2dd91e 	.word	0x4d2dd91e
     130:	482d      	ldr	r0, [pc, #180]	; (1e8 <loop+0xc8>)
     132:	f000      	.short	0xf000
     134:	f8af 682a 	strh.w	r6, [pc, #2090]	; 962 <schedule_transfer+0x6e>
     138:	4603492c 	.word	0x4603492c
     13c:	4290      	cmp	r0, r2
     13e:	6008      	str	r0, [r1, #0]
     140:	d336      	bcc.n	1b0 <loop+0x90>
     142:	1a9a      	subs	r2, r3, r2
     144:	d9112af9 	.word	0xd9112af9
     148:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     14c:	4826      	ldr	r0, [pc, #152]	; (1e8 <loop+0xc8>)
     14e:	602b      	str	r3, [r5, #0]
     150:	f8a6f000 	.word	0xf8a6f000
     154:	2101      	movs	r1, #1
     156:	4824      	.short	0x4824
     158:	f000 f91a 	bl	390 <VisualMicroDebug::outPacketStart(bool)>
     15c:	4822bb50 	.word	0x4822bb50
     160:	2102      	movs	r1, #2
     162:	f000 f88b 	bl	27c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     166:	4820      	.short	0x4820
     168:	f000 f8fe 	bl	368 <VisualMicroDebug::OnBreakPointEnd()>
	if (pushbutton.update()) 
	{
		if (pushbutton.fallingEdge())
     16c:	f0004820 	.word	0xf0004820
     170:	fa49 b900 			; <UNDEFINED> instruction: 0xfa49b900
     174:	481ebd38 	.word	0x481ebd38
		{
			for (int i = 0; i < steps_per_press; i++)
     178:	f000 fa64 	bl	644 <Bounce::fallingEdge()>
     17c:	d0f92800 	.word	0xd0f92800
			{
				digitalWrite(STEP_PIN, HIGH);
     180:	4d1c      	ldr	r5, [pc, #112]	; (1f4 <loop+0xd4>)
     182:	682b      	.short	0x682b
     184:	2b00      	cmp	r3, #0
     186:	ddf5      	ble.n	174 <loop+0x54>
     188:	21012400 	.word	0x21012400
				delay(1);
				digitalWrite(STEP_PIN, LOW);
     18c:	2009      	movs	r0, #9
     18e:	f000      	.short	0xf000
     190:	fafd 2001 			; <UNDEFINED> instruction: 0xfafd2001
				delay(1);
     194:	fa60f000 	.word	0xfa60f000
				i++;
     198:	2100      	movs	r1, #0
     19a:	2009      	.short	0x2009
	{
		if (pushbutton.fallingEdge())
		{
			for (int i = 0; i < steps_per_press; i++)
			{
				digitalWrite(STEP_PIN, HIGH);
     19c:	3402      	adds	r4, #2
				delay(1);
				digitalWrite(STEP_PIN, LOW);
				delay(1);
				i++;
     19e:	f000 faf5 	bl	78c <digitalWrite>
			}
     1a2:	2001      	.short	0x2001
     1a4:	f000 fa58 	bl	658 <delay>
	{
		if (pushbutton.fallingEdge())
		{
			for (int i = 0; i < steps_per_press; i++)
			{
				digitalWrite(STEP_PIN, HIGH);
     1a8:	42a3682b 	.word	0x42a3682b
     1ac:	dced      	bgt.n	18a <loop+0x6a>
     1ae:	bd38      	.short	0xbd38

int steps_per_press = 50;

void loop() 
{
  //move 1 step each high edge on "step"
     1b0:	602b      	str	r3, [r5, #0]
     1b2:	e7db      	.short	0xe7db
     1b4:	2101      	movs	r1, #1
     1b6:	480c      	.short	0x480c
     1b8:	f000 f888 	bl	2cc <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
     1bc:	480e2101 	.word	0x480e2101
     1c0:	f001 fb62 	bl	1888 <usb_serial_write>
     1c4:	23006821 	.word	0x23006821

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     1c8:	220a      	movs	r2, #10
     1ca:	480c      	ldr	r0, [pc, #48]	; (1fc <loop+0xdc>)
     1cc:	fc2af001 	.word	0xfc2af001
     1d0:	4805      	ldr	r0, [pc, #20]	; (1e8 <loop+0xc8>)
     1d2:	f000      	.short	0xf000
     1d4:	f8bb 4804 	ldrh.w	r4, [fp, #2052]	; 0x804
     1d8:	f000 f8f6 	bl	3c8 <VisualMicroDebug::outPacketEnd()>
     1dc:	e7bf      	b.n	15e <loop+0x3e>
     1de:	bf00      	nop
     1e0:	20000c14 	.word	0x20000c14
     1e4:	20000bbc 	.word	0x20000bbc
     1e8:	20000bc4 	.word	0x20000bc4
     1ec:	20000bc0 	.word	0x20000bc0
     1f0:	20000bac 	.word	0x20000bac
     1f4:	200005ac 	.word	0x200005ac
     1f8:	2000001c 	.word	0x2000001c
     1fc:	200005dc 	.word	0x200005dc

00000200 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__>:
uint32_t LastStepTime = 0;
uint32_t CurrentTime = 0;

Bounce pushbutton = Bounce(GO_PIN, 10);  // 10 ms debounce

// the setup function runs once when you press reset or power the board
     200:	220a      	movs	r2, #10
     202:	2107      	movs	r1, #7
     204:	4801      	ldr	r0, [pc, #4]	; (20c <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xc>)
     206:	f000 b9d1 	b.w	5ac <Bounce::Bounce(unsigned char, unsigned long)>
     20a:	bf00      	nop
     20c:	20000bac 	.word	0x20000bac

00000210 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]>:
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}

// Work out if we have a DigitalPin Inbound
void VisualMicroDebug::digitalWriteMessageCheck()
     210:	b530      	push	{r4, r5, lr}
     212:	b083      	sub	sp, #12
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     214:	f001 fb12 	bl	183c <usb_serial_getchar>
     218:	f001 fb10 	bl	183c <usb_serial_getchar>
     21c:	ad01      	add	r5, sp, #4
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     21e:	b2c0      	uxtb	r0, r0
	int pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     220:	283a      	cmp	r0, #58	; 0x3a
     222:	d007      	beq.n	234 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x24>
     224:	462c      	mov	r4, r5
			pinStr[pinCharRead] = nxt;
     226:	f804 0b01 	strb.w	r0, [r4], #1
     22a:	f001 fb07 	bl	183c <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     22e:	b2c0      	uxtb	r0, r0
	int pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     230:	283a      	cmp	r0, #58	; 0x3a
     232:	d1f8      	bne.n	226 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x16>
			pinStr[pinCharRead] = nxt;
			pinCharRead++;
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
     234:	4628      	mov	r0, r5
     236:	f002 f8b3 	bl	23a0 <atoi>
     23a:	4604      	mov	r4, r0
     23c:	f001 fafe 	bl	183c <usb_serial_getchar>
		int state = read() - 48;
     240:	b2c0      	uxtb	r0, r0
     242:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
     246:	2901      	cmp	r1, #1
     248:	d802      	bhi.n	250 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x40>
     24a:	e011      	b.n	270 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x60>
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     24c:	280d      	cmp	r0, #13
     24e:	d004      	beq.n	25a <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x4a>
     250:	f001 faf4 	bl	183c <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     254:	b2c0      	uxtb	r0, r0
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     256:	280a      	cmp	r0, #10
     258:	d1f8      	bne.n	24c <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x3c>
        virtual int peek() { return usb_serial_peekchar(); }
     25a:	f001 fa8d 	bl	1778 <usb_serial_peekchar>
			nxt = read();
		}
		if (peek() == '\n') {
     25e:	b2c0      	uxtb	r0, r0
     260:	280a      	cmp	r0, #10
     262:	d001      	beq.n	268 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x58>
			read();
		}
	}
}
     264:	b003      	add	sp, #12
     266:	bd30      	pop	{r4, r5, pc}
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     268:	f001 fae8 	bl	183c <usb_serial_getchar>
     26c:	b003      	add	sp, #12
     26e:	bd30      	pop	{r4, r5, pc}
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
     270:	b2c9      	uxtb	r1, r1
     272:	b2e0      	uxtb	r0, r4
     274:	f000 fa8a 	bl	78c <digitalWrite>
     278:	e7ea      	b.n	250 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]+0x40>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     27a:	bf00      	nop

0000027c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
     27c:	4804      	ldr	r0, [pc, #16]	; (290 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
     27e:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     280:	4411      	add	r1, r2
     282:	e001      	b.n	288 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     284:	4299      	cmp	r1, r3
     286:	d302      	bcc.n	28e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
     288:	6803      	ldr	r3, [r0, #0]
     28a:	429a      	cmp	r2, r3
     28c:	d9fa      	bls.n	284 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
     28e:	4770      	bx	lr
     290:	20000c14 	.word	0x20000c14

00000294 <VisualMicroDebug::DBG_Millis()>:
     294:	4b01      	ldr	r3, [pc, #4]	; (29c <VisualMicroDebug::DBG_Millis()+0x8>)
     296:	6818      	ldr	r0, [r3, #0]
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
}
     298:	4770      	bx	lr
     29a:	bf00      	nop
     29c:	20000c14 	.word	0x20000c14

000002a0 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
     2a0:	4b09      	ldr	r3, [pc, #36]	; (2c8 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x28>)
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
     2a2:	6882      	ldr	r2, [r0, #8]
     2a4:	681b      	ldr	r3, [r3, #0]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
     2a6:	b510      	push	{r4, lr}
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
     2a8:	2400      	movs	r4, #0
void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
     2aa:	6101      	str	r1, [r0, #16]
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
     2ac:	60c2      	str	r2, [r0, #12]
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
     2ae:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
     2b0:	6083      	str	r3, [r0, #8]
        virtual int peek() { return usb_serial_peekchar(); }
     2b2:	f001 fa61 	bl	1778 <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	int pinCharRead = 0;
	if (nxtChar == 'd') {
     2b6:	b2c0      	uxtb	r0, r0
     2b8:	2864      	cmp	r0, #100	; 0x64
     2ba:	d000      	beq.n	2be <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x1e>
     2bc:	bd10      	pop	{r4, pc}
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}
     2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2c2:	f7ff bfa5 	b.w	210 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]>
     2c6:	bf00      	nop
     2c8:	20000c14 	.word	0x20000c14

000002cc <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:
		}
	}
}

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
     2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     2d0:	4b19      	ldr	r3, [pc, #100]	; (338 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x6c>)
     2d2:	460e      	mov	r6, r1
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     2d4:	4c19      	ldr	r4, [pc, #100]	; (33c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x70>)
     2d6:	4605      	mov	r5, r0
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2d8:	2106      	movs	r1, #6
     2da:	4819      	ldr	r0, [pc, #100]	; (340 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
     2dc:	681f      	ldr	r7, [r3, #0]
     2de:	f001 fad3 	bl	1888 <usb_serial_write>
     2e2:	4631      	mov	r1, r6
     2e4:	2300      	movs	r3, #0
     2e6:	220a      	movs	r2, #10
     2e8:	4620      	mov	r0, r4
     2ea:	f001 fb9b 	bl	1a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     2ee:	4e15      	ldr	r6, [pc, #84]	; (344 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
     2f0:	2103      	movs	r1, #3
     2f2:	4815      	ldr	r0, [pc, #84]	; (348 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
     2f4:	f001 fac8 	bl	1888 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     2f8:	4639      	mov	r1, r7
     2fa:	2300      	movs	r3, #0
     2fc:	220a      	movs	r2, #10
     2fe:	4620      	mov	r0, r4
     300:	f001 fb90 	bl	1a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     304:	4630      	mov	r0, r6
     306:	2101      	movs	r1, #1
     308:	f001 fabe 	bl	1888 <usb_serial_write>
     30c:	68a9      	ldr	r1, [r5, #8]
     30e:	2300      	movs	r3, #0
     310:	220a      	movs	r2, #10
     312:	1a79      	subs	r1, r7, r1
     314:	4620      	mov	r0, r4
     316:	f001 fb85 	bl	1a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     31a:	4630      	mov	r0, r6
     31c:	2101      	movs	r1, #1
     31e:	f001 fab3 	bl	1888 <usb_serial_write>
     322:	68ae      	ldr	r6, [r5, #8]
     324:	68e9      	ldr	r1, [r5, #12]
     326:	4620      	mov	r0, r4
     328:	2300      	movs	r3, #0
     32a:	220a      	movs	r2, #10
     32c:	1a71      	subs	r1, r6, r1
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
     32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     332:	f001 bb77 	b.w	1a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     336:	bf00      	nop
     338:	20000c14 	.word	0x20000c14
     33c:	200005dc 	.word	0x200005dc
     340:	20000020 	.word	0x20000020
     344:	2000002c 	.word	0x2000002c
     348:	20000028 	.word	0x20000028

0000034c <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
     34c:	b508      	push	{r3, lr}
     34e:	2106      	movs	r1, #6
     350:	4803      	ldr	r0, [pc, #12]	; (360 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
     352:	f001 fa99 	bl	1888 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     356:	4803      	ldr	r0, [pc, #12]	; (364 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif

#endif
}
     358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     35c:	f001 bb52 	b.w	1a04 <Print::println()>
     360:	20000030 	.word	0x20000030
     364:	200005dc 	.word	0x200005dc

00000368 <VisualMicroDebug::OnBreakPointEnd()>:

void VisualMicroDebug::OnBreakPointEnd()
{
     368:	b510      	push	{r4, lr}
     36a:	4604      	mov	r4, r0
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     36c:	f001 fa04 	bl	1778 <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	int pinCharRead = 0;
	if (nxtChar == 'd') {
     370:	b2c0      	uxtb	r0, r0
     372:	2864      	cmp	r0, #100	; 0x64
     374:	d003      	beq.n	37e <VisualMicroDebug::OnBreakPointEnd()+0x16>
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <VisualMicroDebug::OnBreakPointEnd()+0x24>)
     378:	681b      	ldr	r3, [r3, #0]

void VisualMicroDebug::OnBreakPointEnd()
{
	digitalWriteMessageCheck(); // Check for Digital Pin
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
     37a:	60a3      	str	r3, [r4, #8]
     37c:	bd10      	pop	{r4, pc}
     37e:	f7ff ff47 	bl	210 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.2]>
     382:	4b02      	ldr	r3, [pc, #8]	; (38c <VisualMicroDebug::OnBreakPointEnd()+0x24>)
     384:	681b      	ldr	r3, [r3, #0]
     386:	60a3      	str	r3, [r4, #8]
     388:	bd10      	pop	{r4, pc}
     38a:	bf00      	nop
     38c:	20000c14 	.word	0x20000c14

00000390 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     390:	b410      	push	{r4}
     392:	4a0c      	ldr	r2, [pc, #48]	; (3c4 <VisualMicroDebug::outPacketStart(bool)+0x34>)
     394:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
     396:	b971      	cbnz	r1, 3b6 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     398:	6841      	ldr	r1, [r0, #4]
     39a:	6813      	ldr	r3, [r2, #0]
     39c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     39e:	2918      	cmp	r1, #24
     3a0:	d809      	bhi.n	3b6 <VisualMicroDebug::outPacketStart(bool)+0x26>
     3a2:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     3a4:	f100 0319 	add.w	r3, r0, #25
     3a8:	1a59      	subs	r1, r3, r1
     3aa:	e001      	b.n	3b0 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     3ac:	4299      	cmp	r1, r3
     3ae:	d302      	bcc.n	3b6 <VisualMicroDebug::outPacketStart(bool)+0x26>
     3b0:	6813      	ldr	r3, [r2, #0]
     3b2:	4298      	cmp	r0, r3
     3b4:	d9fa      	bls.n	3ac <VisualMicroDebug::outPacketStart(bool)+0x1c>
     3b6:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
     3b8:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     3ba:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
     3c0:	4770      	bx	lr
     3c2:	bf00      	nop
     3c4:	20000c14 	.word	0x20000c14

000003c8 <VisualMicroDebug::outPacketEnd()>:
     3c8:	4770      	bx	lr
     3ca:	bf00      	nop

000003cc <VisualMicroDebug::begin(unsigned long)>:
	//transport = theSerial;
	//VM_DEBUGGER_SOFT_TRANSPORT.begin(baud);
}

void VisualMicroDebug::begin(unsigned long baud)
{
     3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     3ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     3d2:	f240 26ee 	movw	r6, #750	; 0x2ee
     3d6:	f000 f93f 	bl	658 <delay>
class usb_serial_class : public Stream
{
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
     3da:	480d      	ldr	r0, [pc, #52]	; (410 <VisualMicroDebug::begin(unsigned long)+0x44>)
     3dc:	4a0d      	ldr	r2, [pc, #52]	; (414 <VisualMicroDebug::begin(unsigned long)+0x48>)
     3de:	6804      	ldr	r4, [r0, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3e0:	4d0d      	ldr	r5, [pc, #52]	; (418 <VisualMicroDebug::begin(unsigned long)+0x4c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     3e2:	4f0e      	ldr	r7, [pc, #56]	; (41c <VisualMicroDebug::begin(unsigned long)+0x50>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3e4:	7813      	ldrb	r3, [r2, #0]
     3e6:	b13b      	cbz	r3, 3f8 <VisualMicroDebug::begin(unsigned long)+0x2c>
     3e8:	782b      	ldrb	r3, [r5, #0]
     3ea:	07db      	lsls	r3, r3, #31
     3ec:	d504      	bpl.n	3f8 <VisualMicroDebug::begin(unsigned long)+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     3ee:	6803      	ldr	r3, [r0, #0]
     3f0:	6839      	ldr	r1, [r7, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3f2:	1a5b      	subs	r3, r3, r1
     3f4:	2b0e      	cmp	r3, #14
     3f6:	d80a      	bhi.n	40e <VisualMicroDebug::begin(unsigned long)+0x42>
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
     3f8:	6803      	ldr	r3, [r0, #0]
			if (usb_configuration) {
     3fa:	7811      	ldrb	r1, [r2, #0]
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
     3fc:	1b1b      	subs	r3, r3, r4
			if (usb_configuration) {
     3fe:	b119      	cbz	r1, 408 <VisualMicroDebug::begin(unsigned long)+0x3c>
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
     400:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     404:	d9ee      	bls.n	3e4 <VisualMicroDebug::begin(unsigned long)+0x18>
     406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     408:	42b3      	cmp	r3, r6
     40a:	d9eb      	bls.n	3e4 <VisualMicroDebug::begin(unsigned long)+0x18>
     40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     410:	20000c14 	.word	0x20000c14
     414:	20000c60 	.word	0x20000c60
     418:	20000da8 	.word	0x20000da8
     41c:	20003288 	.word	0x20003288

00000420 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     420:	2300      	movs	r3, #0
     422:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     424:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     426:	b141      	cbz	r1, 43a <VisualMicroDebug::init(unsigned long)+0x1a>
     428:	4804      	ldr	r0, [pc, #16]	; (43c <VisualMicroDebug::init(unsigned long)+0x1c>)
     42a:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     42c:	4411      	add	r1, r2
     42e:	e001      	b.n	434 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     430:	4299      	cmp	r1, r3
     432:	d302      	bcc.n	43a <VisualMicroDebug::init(unsigned long)+0x1a>
     434:	6803      	ldr	r3, [r0, #0]
     436:	429a      	cmp	r2, r3
     438:	d9fa      	bls.n	430 <VisualMicroDebug::init(unsigned long)+0x10>
     43a:	4770      	bx	lr
     43c:	20000c14 	.word	0x20000c14

00000440 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     440:	b538      	push	{r3, r4, r5, lr}
     442:	4c0f      	ldr	r4, [pc, #60]	; (480 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
     444:	460d      	mov	r5, r1
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     446:	2106      	movs	r1, #6
     448:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     44a:	6043      	str	r3, [r0, #4]
     44c:	480d      	ldr	r0, [pc, #52]	; (484 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
     44e:	f001 fa1b 	bl	1888 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     452:	220a      	movs	r2, #10
     454:	2300      	movs	r3, #0
     456:	4629      	mov	r1, r5
     458:	480b      	ldr	r0, [pc, #44]	; (488 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     45a:	f001 fae3 	bl	1a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     45e:	2106      	movs	r1, #6
     460:	480a      	ldr	r0, [pc, #40]	; (48c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
     462:	f001 fa11 	bl	1888 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     466:	4808      	ldr	r0, [pc, #32]	; (488 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     468:	f001 facc 	bl	1a04 <Print::println()>
     46c:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     46e:	f102 0132 	add.w	r1, r2, #50	; 0x32
     472:	e001      	b.n	478 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     474:	4299      	cmp	r1, r3
     476:	d302      	bcc.n	47e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
     478:	6823      	ldr	r3, [r4, #0]
     47a:	429a      	cmp	r2, r3
     47c:	d9fa      	bls.n	474 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
     47e:	bd38      	pop	{r3, r4, r5, pc}
     480:	20000c14 	.word	0x20000c14
     484:	20000038 	.word	0x20000038
     488:	200005dc 	.word	0x200005dc
     48c:	20000040 	.word	0x20000040

00000490 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
     490:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     492:	7e03      	ldrb	r3, [r0, #24]
     494:	b90b      	cbnz	r3, 49a <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
     496:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
     498:	bd38      	pop	{r3, r4, r5, pc}
     49a:	460d      	mov	r5, r1
     49c:	4604      	mov	r4, r0
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     49e:	f001 f98d 	bl	17bc <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     4a2:	f010 0fff 	tst.w	r0, #255	; 0xff
     4a6:	d101      	bne.n	4ac <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
     4a8:	2065      	movs	r0, #101	; 0x65
     4aa:	bd38      	pop	{r3, r4, r5, pc}
     4ac:	f001 f986 	bl	17bc <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     4b0:	f010 0fff 	tst.w	r0, #255	; 0xff
     4b4:	d0f8      	beq.n	4a8 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     4b6:	f001 f9c1 	bl	183c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     4ba:	b2c0      	uxtb	r0, r0
     4bc:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     4c0:	2b1e      	cmp	r3, #30
     4c2:	d8f3      	bhi.n	4ac <VisualMicroDebug::breakWait(unsigned char)+0x1c>
     4c4:	a201      	add	r2, pc, #4	; (adr r2, 4cc <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
     4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     4ca:	bf00      	nop
     4cc:	00000555 	.word	0x00000555
     4d0:	000004ad 	.word	0x000004ad
     4d4:	000004ad 	.word	0x000004ad
     4d8:	000004ad 	.word	0x000004ad
     4dc:	000004ad 	.word	0x000004ad
     4e0:	000004ad 	.word	0x000004ad
     4e4:	000004ad 	.word	0x000004ad
     4e8:	000004ad 	.word	0x000004ad
     4ec:	000004ad 	.word	0x000004ad
     4f0:	000004ad 	.word	0x000004ad
     4f4:	000004ad 	.word	0x000004ad
     4f8:	00000549 	.word	0x00000549
     4fc:	000004ad 	.word	0x000004ad
     500:	000004ad 	.word	0x000004ad
     504:	000004ad 	.word	0x000004ad
     508:	000004ad 	.word	0x000004ad
     50c:	00000497 	.word	0x00000497
     510:	000004ad 	.word	0x000004ad
     514:	000004ad 	.word	0x000004ad
     518:	000004ad 	.word	0x000004ad
     51c:	000004ad 	.word	0x000004ad
     520:	000004ad 	.word	0x000004ad
     524:	000004ad 	.word	0x000004ad
     528:	000004ad 	.word	0x000004ad
     52c:	000004ad 	.word	0x000004ad
     530:	00000497 	.word	0x00000497
     534:	000004ad 	.word	0x000004ad
     538:	000004ad 	.word	0x000004ad
     53c:	000004ad 	.word	0x000004ad
     540:	000004ad 	.word	0x000004ad
     544:	00000499 	.word	0x00000499
		{

		case 'c':
			sendContinuedACK(breakPointId);
     548:	4620      	mov	r0, r4
     54a:	4629      	mov	r1, r5
     54c:	f7ff ff78 	bl	440 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
     550:	2063      	movs	r0, #99	; 0x63
     552:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     554:	2300      	movs	r3, #0
			return 'c';
     556:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     558:	7623      	strb	r3, [r4, #24]
     55a:	bd38      	pop	{r3, r4, r5, pc}

0000055c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	4605      	mov	r5, r0
     560:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     562:	b1a9      	cbz	r1, 590 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
     564:	2301      	movs	r3, #1
     566:	4c0b      	ldr	r4, [pc, #44]	; (594 <VisualMicroDebug::start(bool, bool)+0x38>)
     568:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     56a:	2100      	movs	r1, #0
     56c:	4628      	mov	r0, r5
     56e:	f7ff ff8f 	bl	490 <VisualMicroDebug::breakWait(unsigned char)>
     572:	2863      	cmp	r0, #99	; 0x63
     574:	d00c      	beq.n	590 <VisualMicroDebug::start(bool, bool)+0x34>
     576:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     578:	1c51      	adds	r1, r2, #1
     57a:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     57c:	429a      	cmp	r2, r3
     57e:	d8f4      	bhi.n	56a <VisualMicroDebug::start(bool, bool)+0xe>
     580:	4299      	cmp	r1, r3
     582:	d2fa      	bcs.n	57a <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     584:	2100      	movs	r1, #0
     586:	4628      	mov	r0, r5
     588:	f7ff ff82 	bl	490 <VisualMicroDebug::breakWait(unsigned char)>
     58c:	2863      	cmp	r0, #99	; 0x63
     58e:	d1f2      	bne.n	576 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     590:	762e      	strb	r6, [r5, #24]
     592:	bd70      	pop	{r4, r5, r6, pc}
     594:	20000c14 	.word	0x20000c14

00000598 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     598:	4b03      	ldr	r3, [pc, #12]	; (5a8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     59a:	2200      	movs	r2, #0
     59c:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     59e:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     5a0:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     5a2:	615a      	str	r2, [r3, #20]
     5a4:	4770      	bx	lr
     5a6:	bf00      	nop
     5a8:	20000bc4 	.word	0x20000bc4

000005ac <Bounce::Bounce(unsigned char, unsigned long)>:

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
     5ac:	b538      	push	{r3, r4, r5, lr}
     5ae:	4b07      	ldr	r3, [pc, #28]	; (5cc <Bounce::Bounce(unsigned char, unsigned long)+0x20>)
     5b0:	4604      	mov	r4, r0
     5b2:	460d      	mov	r5, r1


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
     5b4:	2100      	movs	r1, #0
     5b6:	681b      	ldr	r3, [r3, #0]
       }


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
     5b8:	6042      	str	r2, [r0, #4]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
     5ba:	4628      	mov	r0, r5


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
     5bc:	60a1      	str	r1, [r4, #8]


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
     5be:	6023      	str	r3, [r4, #0]
	state = digitalRead(pin);
     5c0:	f000 f8ea 	bl	798 <digitalRead>
    this->pin = pin;
     5c4:	7365      	strb	r5, [r4, #13]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
     5c6:	7320      	strb	r0, [r4, #12]
    this->pin = pin;
}
     5c8:	4620      	mov	r0, r4
     5ca:	bd38      	pop	{r3, r4, r5, pc}
     5cc:	20000c14 	.word	0x20000c14

000005d0 <Bounce::debounce()>:
	return (int)state;
}


// Protected: debounces the pin
int Bounce::debounce() {
     5d0:	b538      	push	{r3, r4, r5, lr}
     5d2:	4604      	mov	r4, r0
	
	uint8_t newState = digitalRead(pin);
     5d4:	7b40      	ldrb	r0, [r0, #13]
     5d6:	f000 f8df 	bl	798 <digitalRead>
	if (state != newState ) {
     5da:	7b23      	ldrb	r3, [r4, #12]
     5dc:	4283      	cmp	r3, r0
     5de:	d00c      	beq.n	5fa <Bounce::debounce()+0x2a>
     5e0:	4907      	ldr	r1, [pc, #28]	; (600 <Bounce::debounce()+0x30>)
     5e2:	4602      	mov	r2, r0
  		if (millis() - previous_millis >= interval_millis) {
     5e4:	6825      	ldr	r5, [r4, #0]
     5e6:	680b      	ldr	r3, [r1, #0]
     5e8:	6860      	ldr	r0, [r4, #4]
     5ea:	1b5b      	subs	r3, r3, r5
     5ec:	4283      	cmp	r3, r0
     5ee:	d304      	bcc.n	5fa <Bounce::debounce()+0x2a>
     5f0:	680b      	ldr	r3, [r1, #0]
  			previous_millis = millis();
  			state = newState;
  			return 1;
     5f2:	2001      	movs	r0, #1
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
  			state = newState;
     5f4:	7322      	strb	r2, [r4, #12]
int Bounce::debounce() {
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
     5f6:	6023      	str	r3, [r4, #0]
  			state = newState;
  			return 1;
     5f8:	bd38      	pop	{r3, r4, r5, pc}
	}
  }
  
  return 0;
     5fa:	2000      	movs	r0, #0
	
}
     5fc:	bd38      	pop	{r3, r4, r5, pc}
     5fe:	bf00      	nop
     600:	20000c14 	.word	0x20000c14

00000604 <Bounce::update()>:
}



int Bounce::update()
{
     604:	b538      	push	{r3, r4, r5, lr}
     606:	4604      	mov	r4, r0
	if ( debounce() ) {
     608:	f7ff ffe2 	bl	5d0 <Bounce::debounce()>
     60c:	b988      	cbnz	r0, 632 <Bounce::update()+0x2e>
        return stateChanged = 1;
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
     60e:	68a3      	ldr	r3, [r4, #8]
     610:	b163      	cbz	r3, 62c <Bounce::update()+0x28>
     612:	490b      	ldr	r1, [pc, #44]	; (640 <Bounce::update()+0x3c>)
     614:	6825      	ldr	r5, [r4, #0]
     616:	680a      	ldr	r2, [r1, #0]
     618:	1b52      	subs	r2, r2, r5
     61a:	4293      	cmp	r3, r2
     61c:	d806      	bhi.n	62c <Bounce::update()+0x28>
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
     61e:	2301      	movs	r3, #1
     620:	680a      	ldr	r2, [r1, #0]
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
     622:	60a0      	str	r0, [r4, #8]
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
        previous_millis = millis();
     624:	6022      	str	r2, [r4, #0]
		 rebounce(0);
		 return stateChanged = 1;
     626:	4618      	mov	r0, r3
     628:	73a3      	strb	r3, [r4, #14]
     62a:	bd38      	pop	{r3, r4, r5, pc}
	}

	return stateChanged = 0;
     62c:	2300      	movs	r3, #0
     62e:	73a3      	strb	r3, [r4, #14]
}
     630:	bd38      	pop	{r3, r4, r5, pc}

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
     632:	2301      	movs	r3, #1
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
     634:	2200      	movs	r2, #0

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
     636:	4618      	mov	r0, r3
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
     638:	60a2      	str	r2, [r4, #8]

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
     63a:	73a3      	strb	r3, [r4, #14]
     63c:	bd38      	pop	{r3, r4, r5, pc}
     63e:	bf00      	nop
     640:	20000c14 	.word	0x20000c14

00000644 <Bounce::fallingEdge()>:
}

// The risingEdge method is true for one scan after the de-bounced input goes from off-to-on.
bool  Bounce::risingEdge() { return stateChanged && state; }
// The fallingEdge  method it true for one scan after the de-bounced input goes from on-to-off. 
bool  Bounce::fallingEdge() { return stateChanged && !state; }
     644:	7b83      	ldrb	r3, [r0, #14]
     646:	b123      	cbz	r3, 652 <Bounce::fallingEdge()+0xe>
     648:	7b00      	ldrb	r0, [r0, #12]
     64a:	fab0 f080 	clz	r0, r0
     64e:	0940      	lsrs	r0, r0, #5
     650:	4770      	bx	lr
     652:	4618      	mov	r0, r3
     654:	4770      	bx	lr
     656:	bf00      	nop

00000658 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     658:	2800      	cmp	r0, #0
     65a:	d057      	beq.n	70c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     65c:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     65e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     662:	b085      	sub	sp, #20
     664:	4683      	mov	fp, r0
     666:	4c2a      	ldr	r4, [pc, #168]	; (710 <delay+0xb8>)
     668:	4d2a      	ldr	r5, [pc, #168]	; (714 <delay+0xbc>)
     66a:	4e2b      	ldr	r6, [pc, #172]	; (718 <delay+0xc0>)
     66c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     670:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     674:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     676:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     678:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     67c:	2900      	cmp	r1, #0
     67e:	d1f7      	bne.n	670 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     680:	4f26      	ldr	r7, [pc, #152]	; (71c <delay+0xc4>)
     682:	e9cd 8902 	strd	r8, r9, [sp, #8]
     686:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     688:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     68a:	4a25      	ldr	r2, [pc, #148]	; (720 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     68c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     690:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     692:	6812      	ldr	r2, [r2, #0]
     694:	2701      	movs	r7, #1
     696:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     69a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     69e:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     6a0:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6a2:	428b      	cmp	r3, r1
     6a4:	bf08      	it	eq
     6a6:	4542      	cmpeq	r2, r8
     6a8:	bf2c      	ite	cs
     6aa:	46c2      	movcs	sl, r8
     6ac:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     6ae:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     6b2:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     6b6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     6b8:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     6ba:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     6be:	2b00      	cmp	r3, #0
     6c0:	d1f7      	bne.n	6b2 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     6c2:	9801      	ldr	r0, [sp, #4]
     6c4:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     6c6:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6c8:	4815      	ldr	r0, [pc, #84]	; (720 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     6ca:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6ce:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     6d0:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6d4:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     6d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     6dc:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6e0:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     6e2:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     6e4:	4299      	cmp	r1, r3
     6e6:	bf08      	it	eq
     6e8:	4540      	cmpeq	r0, r8
     6ea:	bf2c      	ite	cs
     6ec:	4643      	movcs	r3, r8
     6ee:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     6f0:	441a      	add	r2, r3
     6f2:	4572      	cmp	r2, lr
     6f4:	d307      	bcc.n	706 <delay+0xae>
			if (--msec == 0) return;
     6f6:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     6fa:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     6fe:	d1d8      	bne.n	6b2 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     700:	b005      	add	sp, #20
     702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     706:	f001 f9e1 	bl	1acc <yield>
	}
     70a:	e7d2      	b.n	6b2 <delay+0x5a>
     70c:	4770      	bx	lr
     70e:	bf00      	nop
     710:	20000e78 	.word	0x20000e78
     714:	20000c14 	.word	0x20000c14
     718:	20000c0c 	.word	0x20000c0c
     71c:	e0001004 	.word	0xe0001004
     720:	20000c10 	.word	0x20000c10

00000724 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     724:	0100      	lsls	r0, r0, #4
     726:	4b0f      	ldr	r3, [pc, #60]	; (764 <digitalWrite.part.0+0x40>)
     728:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
     72a:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
     72c:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     72e:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     730:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
     732:	4204      	tst	r4, r0
     734:	d005      	beq.n	742 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
     736:	b159      	cbz	r1, 750 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
     738:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     73c:	f85d 4b04 	ldr.w	r4, [sp], #4
     740:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     742:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
     744:	b949      	cbnz	r1, 75a <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     746:	4a08      	ldr	r2, [pc, #32]	; (768 <digitalWrite.part.0+0x44>)
		}
	}
}
     748:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     74c:	601a      	str	r2, [r3, #0]
		}
	}
}
     74e:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     750:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     754:	f85d 4b04 	ldr.w	r4, [sp], #4
     758:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     75a:	4a04      	ldr	r2, [pc, #16]	; (76c <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     75c:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     760:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     762:	4770      	bx	lr
     764:	20000090 	.word	0x20000090
     768:	00013038 	.word	0x00013038
     76c:	0001f038 	.word	0x0001f038

00000770 <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
     770:	0100      	lsls	r0, r0, #4
     772:	4b05      	ldr	r3, [pc, #20]	; (788 <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
     774:	581a      	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
     776:	1819      	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
     778:	6892      	ldr	r2, [r2, #8]
     77a:	68cb      	ldr	r3, [r1, #12]
     77c:	421a      	tst	r2, r3
}
     77e:	bf14      	ite	ne
     780:	2001      	movne	r0, #1
     782:	2000      	moveq	r0, #0
     784:	4770      	bx	lr
     786:	bf00      	nop
     788:	20000090 	.word	0x20000090

0000078c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     78c:	2836      	cmp	r0, #54	; 0x36
     78e:	d801      	bhi.n	794 <digitalWrite+0x8>
     790:	f7ff bfc8 	b.w	724 <digitalWrite.part.0>
     794:	4770      	bx	lr
     796:	bf00      	nop

00000798 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
     798:	2836      	cmp	r0, #54	; 0x36
     79a:	d801      	bhi.n	7a0 <digitalRead+0x8>
     79c:	f7ff bfe8 	b.w	770 <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
     7a0:	2000      	movs	r0, #0
     7a2:	4770      	bx	lr

000007a4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     7a4:	2836      	cmp	r0, #54	; 0x36
     7a6:	d81c      	bhi.n	7e2 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     7a8:	0100      	lsls	r0, r0, #4
     7aa:	4a1a      	ldr	r2, [pc, #104]	; (814 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     7ac:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     7ae:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     7b2:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     7b4:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     7b6:	d015      	beq.n	7e4 <pinMode+0x40>
     7b8:	2904      	cmp	r1, #4
     7ba:	d013      	beq.n	7e4 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     7bc:	68dc      	ldr	r4, [r3, #12]
     7be:	6842      	ldr	r2, [r0, #4]
     7c0:	ea22 0204 	bic.w	r2, r2, r4
     7c4:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     7c6:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     7c8:	b1e9      	cbz	r1, 806 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     7ca:	2902      	cmp	r1, #2
     7cc:	d01e      	beq.n	80c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     7ce:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     7d0:	685b      	ldr	r3, [r3, #4]
}
     7d2:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     7d6:	bf0c      	ite	eq
     7d8:	490f      	ldreq	r1, [pc, #60]	; (818 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     7da:	4910      	ldrne	r1, [pc, #64]	; (81c <pinMode+0x78>)
     7dc:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     7de:	2215      	movs	r2, #21
     7e0:	601a      	str	r2, [r3, #0]
}
     7e2:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     7e4:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     7e6:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     7e8:	6844      	ldr	r4, [r0, #4]
     7ea:	ea42 0204 	orr.w	r2, r2, r4
     7ee:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     7f0:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     7f2:	d008      	beq.n	806 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     7f4:	f640 0138 	movw	r1, #2104	; 0x838
     7f8:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     7fa:	685b      	ldr	r3, [r3, #4]
     7fc:	2215      	movs	r2, #21
}
     7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     802:	601a      	str	r2, [r3, #0]
}
     804:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     806:	2138      	movs	r1, #56	; 0x38
     808:	6011      	str	r1, [r2, #0]
     80a:	e7f6      	b.n	7fa <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     80c:	4904      	ldr	r1, [pc, #16]	; (820 <pinMode+0x7c>)
     80e:	6011      	str	r1, [r2, #0]
     810:	e7f3      	b.n	7fa <pinMode+0x56>
     812:	bf00      	nop
     814:	20000090 	.word	0x20000090
     818:	00013038 	.word	0x00013038
     81c:	00010038 	.word	0x00010038
     820:	0001f038 	.word	0x0001f038

00000824 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     824:	2004      	movs	r0, #4
     826:	4671      	mov	r1, lr
     828:	4208      	tst	r0, r1
     82a:	d003      	beq.n	834 <_MSP>
     82c:	f3ef 8009 	mrs	r0, PSP
     830:	f000 b808 	b.w	844 <HardFault_HandlerC>

00000834 <_MSP>:
     834:	f3ef 8008 	mrs	r0, MSP
     838:	f000 b804 	b.w	844 <HardFault_HandlerC>

0000083c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     83c:	4770      	bx	lr
     83e:	bf00      	nop

00000840 <startup_default_late_hook>:
#endif

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     840:	4770      	bx	lr
     842:	bf00      	nop

00000844 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     844:	4b1b      	ldr	r3, [pc, #108]	; (8b4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     846:	2105      	movs	r1, #5
     848:	4a1b      	ldr	r2, [pc, #108]	; (8b8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     84a:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     84c:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     84e:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     852:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     854:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     858:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     85a:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     85c:	4c17      	ldr	r4, [pc, #92]	; (8bc <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     85e:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     860:	4817      	ldr	r0, [pc, #92]	; (8c0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     862:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     864:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     868:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     86c:	6823      	ldr	r3, [r4, #0]
     86e:	4283      	cmp	r3, r0
     870:	d902      	bls.n	878 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     872:	4814      	ldr	r0, [pc, #80]	; (8c4 <HardFault_HandlerC+0x80>)
     874:	f001 fa3c 	bl	1cf0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     878:	4d0e      	ldr	r5, [pc, #56]	; (8b4 <HardFault_HandlerC+0x70>)
     87a:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     87c:	2000      	movs	r0, #0
     87e:	4a12      	ldr	r2, [pc, #72]	; (8c8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     880:	4912      	ldr	r1, [pc, #72]	; (8cc <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     882:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     886:	9001      	str	r0, [sp, #4]
     888:	9b01      	ldr	r3, [sp, #4]
     88a:	4293      	cmp	r3, r2
     88c:	d805      	bhi.n	89a <HardFault_HandlerC+0x56>
     88e:	9b01      	ldr	r3, [sp, #4]
     890:	3301      	adds	r3, #1
     892:	9301      	str	r3, [sp, #4]
     894:	9b01      	ldr	r3, [sp, #4]
     896:	4293      	cmp	r3, r2
     898:	d9f9      	bls.n	88e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     89a:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     89e:	9001      	str	r0, [sp, #4]
     8a0:	9b01      	ldr	r3, [sp, #4]
     8a2:	428b      	cmp	r3, r1
     8a4:	d8ed      	bhi.n	882 <HardFault_HandlerC+0x3e>
     8a6:	9b01      	ldr	r3, [sp, #4]
     8a8:	3301      	adds	r3, #1
     8aa:	9301      	str	r3, [sp, #4]
     8ac:	9b01      	ldr	r3, [sp, #4]
     8ae:	428b      	cmp	r3, r1
     8b0:	d9f9      	bls.n	8a6 <HardFault_HandlerC+0x62>
     8b2:	e7e6      	b.n	882 <HardFault_HandlerC+0x3e>
     8b4:	401bc000 	.word	0x401bc000
     8b8:	401f8000 	.word	0x401f8000
     8bc:	200005f4 	.word	0x200005f4
     8c0:	23c345ff 	.word	0x23c345ff
     8c4:	11e1a300 	.word	0x11e1a300
     8c8:	000f423f 	.word	0x000f423f
     8cc:	0089543f 	.word	0x0089543f

000008d0 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
     8d0:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
     8d2:	4a06      	ldr	r2, [pc, #24]	; (8ec <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
     8d4:	2107      	movs	r1, #7
     8d6:	4b06      	ldr	r3, [pc, #24]	; (8f0 <Panic_Temp_isr+0x20>)
     8d8:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
     8da:	6b93      	ldr	r3, [r2, #56]	; 0x38
     8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     8e0:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
     8e2:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
     8e6:	bf30      	wfi
     8e8:	e7fd      	b.n	8e6 <Panic_Temp_isr+0x16>
     8ea:	bf00      	nop
     8ec:	400d4000 	.word	0x400d4000
     8f0:	400ac000 	.word	0x400ac000

000008f4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     8f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     8f6:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     8f8:	b11b      	cbz	r3, 902 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     8fa:	6853      	ldr	r3, [r2, #4]
     8fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     900:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     902:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     904:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     906:	b1dc      	cbz	r4, 940 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     908:	4b14      	ldr	r3, [pc, #80]	; (95c <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     90a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     90c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     910:	420c      	tst	r4, r1
     912:	d11f      	bne.n	954 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     914:	4d12      	ldr	r5, [pc, #72]	; (960 <schedule_transfer+0x6c>)
     916:	682f      	ldr	r7, [r5, #0]
     918:	e004      	b.n	924 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     91a:	682c      	ldr	r4, [r5, #0]
     91c:	1be4      	subs	r4, r4, r7
     91e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     922:	d20b      	bcs.n	93c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     924:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     928:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     92c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     930:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     934:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     938:	0464      	lsls	r4, r4, #17
     93a:	d5ee      	bpl.n	91a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     93c:	4231      	tst	r1, r6
     93e:	d109      	bne.n	954 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     940:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     942:	4c06      	ldr	r4, [pc, #24]	; (95c <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     944:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
     946:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     948:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     94c:	4319      	orrs	r1, r3
     94e:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     952:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     954:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     956:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     958:	bcf0      	pop	{r4, r5, r6, r7}
     95a:	4770      	bx	lr
     95c:	402e0000 	.word	0x402e0000
     960:	e0001004 	.word	0xe0001004

00000964 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     964:	b570      	push	{r4, r5, r6, lr}
     966:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     968:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     96a:	b190      	cbz	r0, 992 <run_callbacks+0x2e>
     96c:	4602      	mov	r2, r0
     96e:	2400      	movs	r4, #0
     970:	e003      	b.n	97a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     972:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     974:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     976:	2a01      	cmp	r2, #1
     978:	d00c      	beq.n	994 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     97a:	6853      	ldr	r3, [r2, #4]
     97c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     980:	d0f7      	beq.n	972 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     982:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     984:	b12c      	cbz	r4, 992 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     986:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     988:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
     98a:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     98c:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     98e:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     990:	d1f9      	bne.n	986 <run_callbacks+0x22>
     992:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     994:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     996:	6373      	str	r3, [r6, #52]	; 0x34
			break;
     998:	e7f4      	b.n	984 <run_callbacks+0x20>
     99a:	bf00      	nop

0000099c <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     99e:	b9e1      	cbnz	r1, 9da <endpoint0_transmit.constprop.1+0x3e>
     9a0:	4c21      	ldr	r4, [pc, #132]	; (a28 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     9a2:	4922      	ldr	r1, [pc, #136]	; (a2c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     9a4:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     9a6:	4b22      	ldr	r3, [pc, #136]	; (a30 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     9a8:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     9aa:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     9ae:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     9b0:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     9b2:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     9b4:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     9b6:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     9b8:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     9ba:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     9be:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     9c2:	4d1c      	ldr	r5, [pc, #112]	; (a34 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
     9c4:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     9c8:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
     9ca:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     9ce:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
     9d0:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     9d4:	2b00      	cmp	r3, #0
     9d6:	d1fb      	bne.n	9d0 <endpoint0_transmit.constprop.1+0x34>
}
     9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     9da:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     9dc:	4b16      	ldr	r3, [pc, #88]	; (a38 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     9de:	4d14      	ldr	r5, [pc, #80]	; (a30 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     9e0:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     9e2:	4c11      	ldr	r4, [pc, #68]	; (a28 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     9e4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     9e8:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     9ea:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     9ec:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     9ee:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     9f2:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     9f4:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     9f8:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     9fa:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     9fe:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     a02:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     a06:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     a08:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a0a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     a0e:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     a12:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     a16:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     a18:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     a1a:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     a1e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     a22:	2b00      	cmp	r3, #0
     a24:	d1fb      	bne.n	a1e <endpoint0_transmit.constprop.1+0x82>
     a26:	e7bc      	b.n	9a2 <endpoint0_transmit.constprop.1+0x6>
     a28:	20003000 	.word	0x20003000
     a2c:	20002020 	.word	0x20002020
     a30:	402e0000 	.word	0x402e0000
     a34:	20000c40 	.word	0x20000c40
     a38:	20002000 	.word	0x20002000

00000a3c <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
     a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     a40:	4cac      	ldr	r4, [pc, #688]	; (cf4 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
     a42:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     a44:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     a48:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     a4c:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     a50:	d05e      	beq.n	b10 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     a52:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     a56:	2b00      	cmp	r3, #0
     a58:	d055      	beq.n	b06 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     a5a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
     a5e:	f8df 92bc 	ldr.w	r9, [pc, #700]	; d1c <isr+0x2e0>
     a62:	4ea5      	ldr	r6, [pc, #660]	; (cf8 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     a64:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     a66:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     a68:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
     a6c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     a6e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     a70:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     a74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     a78:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     a7c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     a80:	049f      	lsls	r7, r3, #18
     a82:	d5f5      	bpl.n	a70 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     a84:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
     a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     a8c:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     a90:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     a94:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
     a98:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
     a9c:	d1fa      	bne.n	a94 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     a9e:	b281      	uxth	r1, r0
     aa0:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     aa4:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     aa8:	42b9      	cmp	r1, r7
     aaa:	f200 80b4 	bhi.w	c16 <isr+0x1da>
     aae:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
     ab2:	f080 81e9 	bcs.w	e88 <isr+0x44c>
     ab6:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
     aba:	f000 816b 	beq.w	d94 <isr+0x358>
     abe:	f200 80f0 	bhi.w	ca2 <isr+0x266>
     ac2:	2980      	cmp	r1, #128	; 0x80
     ac4:	f000 8159 	beq.w	d7a <isr+0x33e>
     ac8:	2982      	cmp	r1, #130	; 0x82
     aca:	f040 80e2 	bne.w	c92 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
     ace:	b292      	uxth	r2, r2
     ad0:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
     ad4:	2907      	cmp	r1, #7
     ad6:	f200 80dc 	bhi.w	c92 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     ada:	0089      	lsls	r1, r1, #2
     adc:	4887      	ldr	r0, [pc, #540]	; (cfc <isr+0x2c0>)
		reply_buffer[0] = 0;
     ade:	4f88      	ldr	r7, [pc, #544]	; (d00 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     ae0:	4408      	add	r0, r1
     ae2:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     ae4:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
     ae6:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
     ae8:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     aea:	f140 820c 	bpl.w	f06 <isr+0x4ca>
     aee:	03ca      	lsls	r2, r1, #15
     af0:	d501      	bpl.n	af6 <isr+0xba>
			reply_buffer[0] = 1;
     af2:	2301      	movs	r3, #1
     af4:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
     af6:	2102      	movs	r1, #2
     af8:	4881      	ldr	r0, [pc, #516]	; (d00 <isr+0x2c4>)
     afa:	f7ff ff4f 	bl	99c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     afe:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     b02:	2b00      	cmp	r3, #0
     b04:	d1b0      	bne.n	a68 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     b06:	4a7b      	ldr	r2, [pc, #492]	; (cf4 <isr+0x2b8>)
     b08:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     b0c:	2b00      	cmp	r3, #0
     b0e:	d150      	bne.n	bb2 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     b10:	f018 0f40 	tst.w	r8, #64	; 0x40
     b14:	d018      	beq.n	b48 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     b16:	4b77      	ldr	r3, [pc, #476]	; (cf4 <isr+0x2b8>)
     b18:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     b1c:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     b1e:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     b22:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
     b26:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     b2a:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
     b2e:	4b71      	ldr	r3, [pc, #452]	; (cf4 <isr+0x2b8>)
     b30:	2c00      	cmp	r4, #0
     b32:	d1fa      	bne.n	b2a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     b34:	f04f 32ff 	mov.w	r2, #4294967295
     b38:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     b3c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     b40:	f000 fd1e 	bl	1580 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
     b44:	4b6f      	ldr	r3, [pc, #444]	; (d04 <isr+0x2c8>)
     b46:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
     b48:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
     b4c:	d003      	beq.n	b56 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     b4e:	4b6e      	ldr	r3, [pc, #440]	; (d08 <isr+0x2cc>)
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	b103      	cbz	r3, b56 <isr+0x11a>
     b54:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
     b56:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
     b5a:	d003      	beq.n	b64 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     b5c:	4b6b      	ldr	r3, [pc, #428]	; (d0c <isr+0x2d0>)
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	b103      	cbz	r3, b64 <isr+0x128>
     b62:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
     b64:	f018 0f04 	tst.w	r8, #4
     b68:	d008      	beq.n	b7c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     b6a:	4b62      	ldr	r3, [pc, #392]	; (cf4 <isr+0x2b8>)
     b6c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     b70:	f413 7300 	ands.w	r3, r3, #512	; 0x200
     b74:	d04c      	beq.n	c10 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
     b76:	4b66      	ldr	r3, [pc, #408]	; (d10 <isr+0x2d4>)
     b78:	2201      	movs	r2, #1
     b7a:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     b7c:	4b5d      	ldr	r3, [pc, #372]	; (cf4 <isr+0x2b8>)
     b7e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
     b82:	0612      	lsls	r2, r2, #24
     b84:	d512      	bpl.n	bac <isr+0x170>
     b86:	f018 0f80 	tst.w	r8, #128	; 0x80
     b8a:	d00f      	beq.n	bac <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
     b8c:	4961      	ldr	r1, [pc, #388]	; (d14 <isr+0x2d8>)
     b8e:	780a      	ldrb	r2, [r1, #0]
     b90:	b162      	cbz	r2, bac <isr+0x170>
			if (--usb_reboot_timer == 0) {
     b92:	3a01      	subs	r2, #1
     b94:	b2d2      	uxtb	r2, r2
     b96:	700a      	strb	r2, [r1, #0]
     b98:	b942      	cbnz	r2, bac <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
     b9a:	495f      	ldr	r1, [pc, #380]	; (d18 <isr+0x2dc>)
     b9c:	780a      	ldrb	r2, [r1, #0]
     b9e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ba2:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
     ba4:	2a00      	cmp	r2, #0
     ba6:	f000 8232 	beq.w	100e <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
     baa:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
     bac:	b003      	add	sp, #12
     bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     bb2:	495a      	ldr	r1, [pc, #360]	; (d1c <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     bb4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     bb8:	6808      	ldr	r0, [r1, #0]
     bba:	4203      	tst	r3, r0
     bbc:	f040 81e6 	bne.w	f8c <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
     bc0:	4a50      	ldr	r2, [pc, #320]	; (d04 <isr+0x2c8>)
     bc2:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
     bc4:	401d      	ands	r5, r3
     bc6:	d0a3      	beq.n	b10 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
     bc8:	0c2f      	lsrs	r7, r5, #16
     bca:	d00f      	beq.n	bec <isr+0x1b0>
     bcc:	4e4a      	ldr	r6, [pc, #296]	; (cf8 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
     bce:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
     bd2:	fa97 f4a7 	rbit	r4, r7
     bd6:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     bda:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
     bde:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     be2:	3040      	adds	r0, #64	; 0x40
     be4:	f7ff febe 	bl	964 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
     be8:	43a7      	bics	r7, r4
     bea:	d1f2      	bne.n	bd2 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
     bec:	b2ad      	uxth	r5, r5
				while(rx) {
     bee:	2d00      	cmp	r5, #0
     bf0:	d08e      	beq.n	b10 <isr+0xd4>
     bf2:	4e41      	ldr	r6, [pc, #260]	; (cf8 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
     bf4:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
     bf6:	fa95 f4a5 	rbit	r4, r5
     bfa:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
     bfe:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
     c02:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
     c06:	f7ff fead 	bl	964 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
     c0a:	43a5      	bics	r5, r4
     c0c:	d1f3      	bne.n	bf6 <isr+0x1ba>
     c0e:	e77f      	b.n	b10 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
     c10:	4a3f      	ldr	r2, [pc, #252]	; (d10 <isr+0x2d4>)
     c12:	7013      	strb	r3, [r2, #0]
     c14:	e7b2      	b.n	b7c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     c16:	f242 0721 	movw	r7, #8225	; 0x2021
     c1a:	42b9      	cmp	r1, r7
     c1c:	d035      	beq.n	c8a <isr+0x24e>
     c1e:	f200 8089 	bhi.w	d34 <isr+0x2f8>
     c22:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
     c26:	f000 8121 	beq.w	e6c <isr+0x430>
     c2a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
     c2e:	d130      	bne.n	c92 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c30:	f3c0 4007 	ubfx	r0, r0, #16, #8
     c34:	4a3a      	ldr	r2, [pc, #232]	; (d20 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     c36:	493b      	ldr	r1, [pc, #236]	; (d24 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     c38:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     c3a:	4f3b      	ldr	r7, [pc, #236]	; (d28 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     c3c:	4a3b      	ldr	r2, [pc, #236]	; (d2c <isr+0x2f0>)
     c3e:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     c40:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     c44:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     c48:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     c4c:	f000 fc9a 	bl	1584 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c50:	4a37      	ldr	r2, [pc, #220]	; (d30 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     c52:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     c54:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c56:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     c58:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     c5a:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     c5c:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     c5e:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     c60:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     c64:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     c68:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     c6a:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
     c6e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     c72:	4a2a      	ldr	r2, [pc, #168]	; (d1c <isr+0x2e0>)
     c74:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
     c76:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     c7a:	2b00      	cmp	r3, #0
     c7c:	d1fb      	bne.n	c76 <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     c7e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     c82:	2b00      	cmp	r3, #0
     c84:	f47f aef0 	bne.w	a68 <isr+0x2c>
     c88:	e73d      	b.n	b06 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
     c8a:	0c11      	lsrs	r1, r2, #16
     c8c:	2907      	cmp	r1, #7
     c8e:	f000 813e 	beq.w	f0e <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     c92:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     c96:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     c9a:	2b00      	cmp	r3, #0
     c9c:	f47f aee4 	bne.w	a68 <isr+0x2c>
     ca0:	e731      	b.n	b06 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     ca2:	f240 3702 	movw	r7, #770	; 0x302
     ca6:	42b9      	cmp	r1, r7
     ca8:	f000 80b0 	beq.w	e0c <isr+0x3d0>
     cac:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
     cb0:	d1ef      	bne.n	c92 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cb2:	4a1f      	ldr	r2, [pc, #124]	; (d30 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cb4:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cb6:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     cb8:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     cba:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     cbc:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     cbe:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     cc0:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     cc4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     cc8:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     cca:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
     cce:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     cd2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     cd6:	2b00      	cmp	r3, #0
     cd8:	d1fb      	bne.n	cd2 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     cda:	0c03      	lsrs	r3, r0, #16
     cdc:	065b      	lsls	r3, r3, #25
     cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     ce2:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     ce6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     cea:	2b00      	cmp	r3, #0
     cec:	f47f aebc 	bne.w	a68 <isr+0x2c>
     cf0:	e709      	b.n	b06 <isr+0xca>
     cf2:	bf00      	nop
     cf4:	402e0000 	.word	0x402e0000
     cf8:	20003000 	.word	0x20003000
     cfc:	402e01c0 	.word	0x402e01c0
     d00:	20000c50 	.word	0x20000c50
     d04:	20000c30 	.word	0x20000c30
     d08:	20000c2c 	.word	0x20000c2c
     d0c:	20000c38 	.word	0x20000c38
     d10:	20000c3c 	.word	0x20000c3c
     d14:	20000c44 	.word	0x20000c44
     d18:	20000c34 	.word	0x20000c34
     d1c:	20000c40 	.word	0x20000c40
     d20:	20000c60 	.word	0x20000c60
     d24:	000200c8 	.word	0x000200c8
     d28:	00cc0002 	.word	0x00cc0002
     d2c:	00c80002 	.word	0x00c80002
     d30:	20002020 	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     d34:	f242 2321 	movw	r3, #8737	; 0x2221
     d38:	4299      	cmp	r1, r3
     d3a:	d05b      	beq.n	df4 <isr+0x3b8>
     d3c:	f242 3321 	movw	r3, #8993	; 0x2321
     d40:	4299      	cmp	r1, r3
     d42:	d1a6      	bne.n	c92 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d44:	4bb5      	ldr	r3, [pc, #724]	; (101c <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d46:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
     d48:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d4a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     d4c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d4e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d50:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     d52:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     d54:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     d58:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d5c:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     d5e:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
     d62:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     d66:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     d6a:	2b00      	cmp	r3, #0
     d6c:	d1fb      	bne.n	d66 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     d6e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     d72:	2b00      	cmp	r3, #0
     d74:	f47f ae78 	bne.w	a68 <isr+0x2c>
     d78:	e6c5      	b.n	b06 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     d7a:	4aa9      	ldr	r2, [pc, #676]	; (1020 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
     d7c:	2102      	movs	r1, #2
     d7e:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
     d80:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
     d82:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
     d84:	f7ff fe0a 	bl	99c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     d88:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     d8c:	2b00      	cmp	r3, #0
     d8e:	f47f ae6b 	bne.w	a68 <isr+0x2c>
     d92:	e6b8      	b.n	b06 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     d94:	b292      	uxth	r2, r2
     d96:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     d9a:	2b07      	cmp	r3, #7
     d9c:	f63f af79 	bhi.w	c92 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
     da0:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     da4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     da8:	4a9e      	ldr	r2, [pc, #632]	; (1024 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     daa:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     dae:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     db2:	441a      	add	r2, r3
     db4:	6813      	ldr	r3, [r2, #0]
     db6:	bf14      	ite	ne
     db8:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     dbc:	f023 0301 	biceq.w	r3, r3, #1
     dc0:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     dc2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     dc4:	4b95      	ldr	r3, [pc, #596]	; (101c <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     dc6:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     dc8:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     dca:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     dcc:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     dce:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     dd2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     dd6:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     dd8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
     ddc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     de0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     de4:	2b00      	cmp	r3, #0
     de6:	d1fb      	bne.n	de0 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     de8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     dec:	2b00      	cmp	r3, #0
     dee:	f47f ae3b 	bne.w	a68 <isr+0x2c>
     df2:	e688      	b.n	b06 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
     df4:	b292      	uxth	r2, r2
     df6:	2a00      	cmp	r2, #0
     df8:	d1a4      	bne.n	d44 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     dfa:	4b8b      	ldr	r3, [pc, #556]	; (1028 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
     dfc:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e00:	4a8a      	ldr	r2, [pc, #552]	; (102c <isr+0x5f0>)
     e02:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     e04:	4b8a      	ldr	r3, [pc, #552]	; (1030 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     e06:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     e08:	7018      	strb	r0, [r3, #0]
     e0a:	e79b      	b.n	d44 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
     e0c:	b292      	uxth	r2, r2
     e0e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
     e12:	2b07      	cmp	r3, #7
     e14:	f63f af3d 	bhi.w	c92 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
     e18:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
     e20:	4a80      	ldr	r2, [pc, #512]	; (1024 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e22:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e26:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     e2a:	441a      	add	r2, r3
     e2c:	6813      	ldr	r3, [r2, #0]
     e2e:	bf14      	ite	ne
     e30:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     e34:	f043 0301 	orreq.w	r3, r3, #1
     e38:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e3a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e3c:	4b77      	ldr	r3, [pc, #476]	; (101c <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     e3e:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     e40:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     e42:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     e44:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     e46:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     e4a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     e4e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     e50:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
     e54:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
     e58:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     e5c:	2b00      	cmp	r3, #0
     e5e:	d1fb      	bne.n	e58 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e60:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e64:	2b00      	cmp	r3, #0
     e66:	f47f adff 	bne.w	a68 <isr+0x2c>
     e6a:	e64c      	b.n	b06 <isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     e6c:	4a71      	ldr	r2, [pc, #452]	; (1034 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
     e6e:	2101      	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     e70:	4b6b      	ldr	r3, [pc, #428]	; (1020 <isr+0x5e4>)
     e72:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     e74:	4618      	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
     e76:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     e78:	f7ff fd90 	bl	99c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     e7c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e80:	2b00      	cmp	r3, #0
     e82:	f47f adf1 	bne.w	a68 <isr+0x2c>
     e86:	e63e      	b.n	b06 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     e88:	4b6b      	ldr	r3, [pc, #428]	; (1038 <isr+0x5fc>)
     e8a:	6859      	ldr	r1, [r3, #4]
     e8c:	2900      	cmp	r1, #0
     e8e:	f43f af00 	beq.w	c92 <isr+0x256>
     e92:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     e94:	fa1f fe82 	uxth.w	lr, r2
     e98:	e004      	b.n	ea4 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     e9a:	330c      	adds	r3, #12
     e9c:	6859      	ldr	r1, [r3, #4]
     e9e:	2900      	cmp	r1, #0
     ea0:	f43f aef7 	beq.w	c92 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     ea4:	881f      	ldrh	r7, [r3, #0]
     ea6:	4287      	cmp	r7, r0
     ea8:	d1f7      	bne.n	e9a <isr+0x45e>
     eaa:	885f      	ldrh	r7, [r3, #2]
     eac:	4577      	cmp	r7, lr
     eae:	d1f4      	bne.n	e9a <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
     eb0:	0a07      	lsrs	r7, r0, #8
     eb2:	2f03      	cmp	r7, #3
     eb4:	f000 80e9 	beq.w	108a <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
     eb8:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
     eba:	0c12      	lsrs	r2, r2, #16
     ebc:	4293      	cmp	r3, r2
     ebe:	bf28      	it	cs
     ec0:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
     ec2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     ec6:	f000 80d1 	beq.w	106c <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
     eca:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
     ece:	f000 808b 	beq.w	fe8 <isr+0x5ac>
     ed2:	4f5a      	ldr	r7, [pc, #360]	; (103c <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
     ed4:	461a      	mov	r2, r3
     ed6:	9301      	str	r3, [sp, #4]
     ed8:	4638      	mov	r0, r7
     eda:	f000 fe6f 	bl	1bbc <memcpy>
     ede:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     ee0:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
     ee4:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
     ee6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     eea:	4955      	ldr	r1, [pc, #340]	; (1040 <isr+0x604>)
     eec:	600a      	str	r2, [r1, #0]
		location += 32;
     eee:	3220      	adds	r2, #32
	} while (location < end_addr);
     ef0:	4297      	cmp	r7, r2
     ef2:	d8fa      	bhi.n	eea <isr+0x4ae>
	asm("dsb");
     ef4:	f3bf 8f4f 	dsb	sy
	asm("isb");
     ef8:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     efc:	484f      	ldr	r0, [pc, #316]	; (103c <isr+0x600>)
     efe:	4619      	mov	r1, r3
     f00:	f7ff fd4c 	bl	99c <endpoint0_transmit.constprop.1>
     f04:	e5fb      	b.n	afe <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     f06:	07cb      	lsls	r3, r1, #31
     f08:	f57f adf5 	bpl.w	af6 <isr+0xba>
     f0c:	e5f1      	b.n	af2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     f0e:	4f4d      	ldr	r7, [pc, #308]	; (1044 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f10:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
     f14:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f16:	494c      	ldr	r1, [pc, #304]	; (1048 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f18:	4b4c      	ldr	r3, [pc, #304]	; (104c <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     f1a:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f1c:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f20:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     f22:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
     f24:	494a      	ldr	r1, [pc, #296]	; (1050 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
     f26:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
     f2a:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f2c:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
     f30:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     f34:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f36:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f3a:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f3e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
     f42:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f46:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f48:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f4c:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f4e:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
     f50:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     f54:	2b00      	cmp	r3, #0
     f56:	d1fb      	bne.n	f50 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
     f58:	4a30      	ldr	r2, [pc, #192]	; (101c <isr+0x5e0>)
     f5a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f5c:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
     f60:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     f62:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     f64:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     f68:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     f6a:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     f6c:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     f70:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     f74:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
     f76:	ea41 0300 	orr.w	r3, r1, r0
     f7a:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     f7e:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
     f82:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     f86:	2b00      	cmp	r3, #0
     f88:	d1fb      	bne.n	f82 <isr+0x546>
     f8a:	e5b8      	b.n	afe <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
     f8c:	482d      	ldr	r0, [pc, #180]	; (1044 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     f8e:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
     f92:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     f94:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
     f96:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     f98:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
     f9a:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     f9c:	f47f ae10 	bne.w	bc0 <isr+0x184>
     fa0:	b281      	uxth	r1, r0
     fa2:	2900      	cmp	r1, #0
     fa4:	f47f ae0c 	bne.w	bc0 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     fa8:	4929      	ldr	r1, [pc, #164]	; (1050 <isr+0x614>)
     faa:	4c2a      	ldr	r4, [pc, #168]	; (1054 <isr+0x618>)
     fac:	c903      	ldmia	r1, {r0, r1}
     fae:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
     fb0:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     fb2:	6020      	str	r0, [r4, #0]
     fb4:	80a1      	strh	r1, [r4, #4]
     fb6:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
     fb8:	f47f ae02 	bne.w	bc0 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
     fbc:	b672      	cpsid	i
	sof_usage |= (1 << interface);
     fbe:	4826      	ldr	r0, [pc, #152]	; (1058 <isr+0x61c>)
     fc0:	7801      	ldrb	r1, [r0, #0]
     fc2:	f041 0104 	orr.w	r1, r1, #4
     fc6:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
     fc8:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
     fcc:	0608      	lsls	r0, r1, #24
     fce:	d406      	bmi.n	fde <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     fd0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     fd4:	2080      	movs	r0, #128	; 0x80
     fd6:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     fda:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
     fde:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
     fe0:	4a1e      	ldr	r2, [pc, #120]	; (105c <isr+0x620>)
     fe2:	2150      	movs	r1, #80	; 0x50
     fe4:	7011      	strb	r1, [r2, #0]
     fe6:	e5eb      	b.n	bc0 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
     fe8:	481d      	ldr	r0, [pc, #116]	; (1060 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
     fea:	461a      	mov	r2, r3
     fec:	4f13      	ldr	r7, [pc, #76]	; (103c <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
     fee:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
     ff2:	491c      	ldr	r1, [pc, #112]	; (1064 <isr+0x628>)
     ff4:	481c      	ldr	r0, [pc, #112]	; (1068 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
     ff6:	9301      	str	r3, [sp, #4]
     ff8:	f1be 0f00 	cmp.w	lr, #0
     ffc:	bf08      	it	eq
     ffe:	4601      	moveq	r1, r0
    1000:	4638      	mov	r0, r7
    1002:	f000 fddb 	bl	1bbc <memcpy>
					usb_descriptor_buffer[1] = 7;
    1006:	2207      	movs	r2, #7
    1008:	9b01      	ldr	r3, [sp, #4]
    100a:	707a      	strb	r2, [r7, #1]
    100c:	e768      	b.n	ee0 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    100e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1016:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    101a:	e5c6      	b.n	baa <isr+0x16e>
    101c:	20002020 	.word	0x20002020
    1020:	20000c50 	.word	0x20000c50
    1024:	402e01c0 	.word	0x402e01c0
    1028:	20000c14 	.word	0x20000c14
    102c:	20003288 	.word	0x20003288
    1030:	20000da8 	.word	0x20000da8
    1034:	20000c60 	.word	0x20000c60
    1038:	20000400 	.word	0x20000400
    103c:	20200000 	.word	0x20200000
    1040:	e000ef70 	.word	0xe000ef70
    1044:	20000c48 	.word	0x20000c48
    1048:	00070080 	.word	0x00070080
    104c:	20002000 	.word	0x20002000
    1050:	20000c58 	.word	0x20000c58
    1054:	20003280 	.word	0x20003280
    1058:	20000c34 	.word	0x20000c34
    105c:	20000c44 	.word	0x20000c44
    1060:	20000c3c 	.word	0x20000c3c
    1064:	60001aa8 	.word	0x60001aa8
    1068:	60001af4 	.word	0x60001af4

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    106c:	480a      	ldr	r0, [pc, #40]	; (1098 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    106e:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1070:	490a      	ldr	r1, [pc, #40]	; (109c <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1072:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1074:	480a      	ldr	r0, [pc, #40]	; (10a0 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1076:	9301      	str	r3, [sp, #4]
    1078:	2f00      	cmp	r7, #0
    107a:	bf08      	it	eq
    107c:	4601      	moveq	r1, r0
    107e:	4809      	ldr	r0, [pc, #36]	; (10a4 <isr+0x668>)
    1080:	f000 fd9c 	bl	1bbc <memcpy>
    1084:	4f07      	ldr	r7, [pc, #28]	; (10a4 <isr+0x668>)
    1086:	9b01      	ldr	r3, [sp, #4]
    1088:	e72a      	b.n	ee0 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    108a:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    108c:	780b      	ldrb	r3, [r1, #0]
    108e:	4293      	cmp	r3, r2
    1090:	bf28      	it	cs
    1092:	4613      	movcs	r3, r2
    1094:	e719      	b.n	eca <isr+0x48e>
    1096:	bf00      	nop
    1098:	20000c3c 	.word	0x20000c3c
    109c:	60001af4 	.word	0x60001af4
    10a0:	60001aa8 	.word	0x60001aa8
    10a4:	20200000 	.word	0x20200000

000010a8 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    10a8:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    10aa:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    10ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    10b2:	bf14      	ite	ne
    10b4:	2700      	movne	r7, #0
    10b6:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    10ba:	2a02      	cmp	r2, #2
    10bc:	d901      	bls.n	10c2 <usb_config_rx+0x1a>
    10be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    10c2:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    10c6:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1108 <usb_config_rx+0x60>
    10ca:	460d      	mov	r5, r1
    10cc:	4604      	mov	r4, r0
    10ce:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    10d2:	2100      	movs	r1, #0
    10d4:	2240      	movs	r2, #64	; 0x40
    10d6:	4698      	mov	r8, r3
    10d8:	4630      	mov	r0, r6
    10da:	f001 f9ad 	bl	2438 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    10de:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    10e0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    10e4:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    10e8:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    10ec:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    10ee:	f1b8 0f00 	cmp.w	r8, #0
    10f2:	d0e4      	beq.n	10be <usb_config_rx+0x16>
    10f4:	4b03      	ldr	r3, [pc, #12]	; (1104 <usb_config_rx+0x5c>)
    10f6:	40a0      	lsls	r0, r4
    10f8:	681c      	ldr	r4, [r3, #0]
    10fa:	4320      	orrs	r0, r4
    10fc:	6018      	str	r0, [r3, #0]
    10fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1102:	bf00      	nop
    1104:	20000c30 	.word	0x20000c30
    1108:	20003000 	.word	0x20003000

0000110c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    110c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    110e:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1116:	bf14      	ite	ne
    1118:	2700      	movne	r7, #0
    111a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    111e:	2a02      	cmp	r2, #2
    1120:	d901      	bls.n	1126 <usb_config_tx+0x1a>
    1122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1126:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1128:	01c5      	lsls	r5, r0, #7
    112a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1170 <usb_config_tx+0x64>
    112e:	4688      	mov	r8, r1
    1130:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1132:	2100      	movs	r1, #0
    1134:	4604      	mov	r4, r0
    1136:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1138:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    113c:	4650      	mov	r0, sl
    113e:	f001 f97b 	bl	2438 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1142:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1144:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    1148:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    114c:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1150:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1154:	2e00      	cmp	r6, #0
    1156:	d0e4      	beq.n	1122 <usb_config_tx+0x16>
    1158:	f104 0010 	add.w	r0, r4, #16
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <usb_config_tx+0x60>)
    115e:	4082      	lsls	r2, r0
    1160:	6818      	ldr	r0, [r3, #0]
    1162:	4302      	orrs	r2, r0
    1164:	601a      	str	r2, [r3, #0]
    1166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    116a:	bf00      	nop
    116c:	20000c30 	.word	0x20000c30
    1170:	20003000 	.word	0x20003000

00001174 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1174:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1176:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1178:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    117a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    117e:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1180:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1182:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1184:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1188:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    118c:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1190:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1194:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1196:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1198:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    119a:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    119c:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    119e:	bcf0      	pop	{r4, r5, r6, r7}
    11a0:	4770      	bx	lr
    11a2:	bf00      	nop

000011a4 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    11a4:	1e83      	subs	r3, r0, #2
    11a6:	2b02      	cmp	r3, #2
    11a8:	d900      	bls.n	11ac <usb_transmit+0x8>
    11aa:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    11ac:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    11ae:	4b06      	ldr	r3, [pc, #24]	; (11c8 <usb_transmit+0x24>)
    11b0:	f100 0410 	add.w	r4, r0, #16
    11b4:	2501      	movs	r5, #1
    11b6:	460a      	mov	r2, r1
    11b8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    11bc:	fa05 f104 	lsl.w	r1, r5, r4
}
    11c0:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    11c2:	f7ff bb97 	b.w	8f4 <schedule_transfer>
    11c6:	bf00      	nop
    11c8:	20003040 	.word	0x20003040

000011cc <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    11cc:	1e83      	subs	r3, r0, #2
    11ce:	2b02      	cmp	r3, #2
    11d0:	d900      	bls.n	11d4 <usb_receive+0x8>
    11d2:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    11d4:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    11d6:	4b05      	ldr	r3, [pc, #20]	; (11ec <usb_receive+0x20>)
    11d8:	2401      	movs	r4, #1
    11da:	460a      	mov	r2, r1
    11dc:	fa04 f100 	lsl.w	r1, r4, r0
    11e0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    11e4:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    11e8:	f7ff bb84 	b.w	8f4 <schedule_transfer>
    11ec:	20003000 	.word	0x20003000

000011f0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    11f0:	6840      	ldr	r0, [r0, #4]
#endif
}
    11f2:	4770      	bx	lr

000011f4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    11f4:	4a12      	ldr	r2, [pc, #72]	; (1240 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    11f6:	4b13      	ldr	r3, [pc, #76]	; (1244 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    11f8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    11fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1200:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1202:	b510      	push	{r4, lr}
    1204:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1206:	d802      	bhi.n	120e <usb_init_serialnumber+0x1a>
    1208:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    120c:	0040      	lsls	r0, r0, #1
    120e:	4c0e      	ldr	r4, [pc, #56]	; (1248 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1210:	a901      	add	r1, sp, #4
    1212:	220a      	movs	r2, #10
    1214:	f000 fece 	bl	1fb4 <ultoa>
    1218:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    121a:	2300      	movs	r3, #0
    121c:	4620      	mov	r0, r4
		char c = buf[i];
    121e:	f811 2b01 	ldrb.w	r2, [r1], #1
    1222:	3301      	adds	r3, #1
		if (!c) break;
    1224:	b13a      	cbz	r2, 1236 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1226:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1228:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    122c:	d1f7      	bne.n	121e <usb_init_serialnumber+0x2a>
    122e:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1230:	7023      	strb	r3, [r4, #0]
}
    1232:	b004      	add	sp, #16
    1234:	bd10      	pop	{r4, pc}
    1236:	005b      	lsls	r3, r3, #1
    1238:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    123a:	7023      	strb	r3, [r4, #0]
}
    123c:	b004      	add	sp, #16
    123e:	bd10      	pop	{r4, pc}
    1240:	401f4400 	.word	0x401f4400
    1244:	0098967f 	.word	0x0098967f
    1248:	200005c4 	.word	0x200005c4

0000124c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    124e:	4914      	ldr	r1, [pc, #80]	; (12a0 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1250:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1254:	4d13      	ldr	r5, [pc, #76]	; (12a4 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1256:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1258:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    125c:	4e12      	ldr	r6, [pc, #72]	; (12a8 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    125e:	4a13      	ldr	r2, [pc, #76]	; (12ac <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1260:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    1264:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1266:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1268:	4628      	mov	r0, r5
    126a:	8832      	ldrh	r2, [r6, #0]
    126c:	f7ff ff82 	bl	1174 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1270:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1272:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1276:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    1278:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    127c:	4a0c      	ldr	r2, [pc, #48]	; (12b0 <rx_queue_transfer+0x64>)
    127e:	6013      	str	r3, [r2, #0]
		location += 32;
    1280:	3320      	adds	r3, #32
	} while (location < end_addr);
    1282:	4299      	cmp	r1, r3
    1284:	d8fb      	bhi.n	127e <rx_queue_transfer+0x32>
	asm("dsb");
    1286:	f3bf 8f4f 	dsb	sy
	asm("isb");
    128a:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    128e:	2003      	movs	r0, #3
    1290:	4629      	mov	r1, r5
    1292:	f7ff ff9b 	bl	11cc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1296:	4b07      	ldr	r3, [pc, #28]	; (12b4 <rx_queue_transfer+0x68>)
    1298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    129c:	601a      	str	r2, [r3, #0]
    129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12a0:	20200060 	.word	0x20200060
    12a4:	20000c80 	.word	0x20000c80
    12a8:	20000d8e 	.word	0x20000d8e
    12ac:	e000e18c 	.word	0xe000e18c
    12b0:	e000ef5c 	.word	0xe000ef5c
    12b4:	e000e10c 	.word	0xe000e10c

000012b8 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    12b8:	4a24      	ldr	r2, [pc, #144]	; (134c <rx_event+0x94>)
    12ba:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    12bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    12c0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    12c4:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    12c6:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    12c8:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    12ca:	2c00      	cmp	r4, #0
    12cc:	dd38      	ble.n	1340 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    12ce:	4920      	ldr	r1, [pc, #128]	; (1350 <rx_event+0x98>)
		if (head != rx_tail) {
    12d0:	4a20      	ldr	r2, [pc, #128]	; (1354 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    12d2:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    12d4:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    12d6:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    12d8:	481f      	ldr	r0, [pc, #124]	; (1358 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    12da:	4e20      	ldr	r6, [pc, #128]	; (135c <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    12dc:	4293      	cmp	r3, r2
    12de:	d007      	beq.n	12f0 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    12e0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    12e4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    12e8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    12ec:	4294      	cmp	r4, r2
    12ee:	d912      	bls.n	1316 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    12f0:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    12f2:	2200      	movs	r2, #0
    12f4:	4f1a      	ldr	r7, [pc, #104]	; (1360 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    12f6:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    12f8:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    12fc:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    1300:	4e18      	ldr	r6, [pc, #96]	; (1364 <rx_event+0xac>)
    1302:	bf94      	ite	ls
    1304:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1306:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    1308:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    130a:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    130c:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    130e:	4414      	add	r4, r2
    1310:	6034      	str	r4, [r6, #0]
    1312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1316:	4b14      	ldr	r3, [pc, #80]	; (1368 <rx_event+0xb0>)
    1318:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    131c:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    131e:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1320:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    1324:	4418      	add	r0, r3
    1326:	f000 fc49 	bl	1bbc <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    132a:	4a0e      	ldr	r2, [pc, #56]	; (1364 <rx_event+0xac>)
				rx_queue_transfer(i);
    132c:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    132e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1332:	6813      	ldr	r3, [r2, #0]
    1334:	441c      	add	r4, r3
    1336:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    133c:	f7ff bf86 	b.w	124c <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    1340:	4628      	mov	r0, r5
	}
}
    1342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    1346:	f7ff bf81 	b.w	124c <rx_queue_transfer>
    134a:	bf00      	nop
    134c:	20000d8e 	.word	0x20000d8e
    1350:	20000da4 	.word	0x20000da4
    1354:	20000d80 	.word	0x20000d80
    1358:	20000d84 	.word	0x20000d84
    135c:	20000d90 	.word	0x20000d90
    1360:	20000c64 	.word	0x20000c64
    1364:	20000da0 	.word	0x20000da0
    1368:	20200060 	.word	0x20200060

0000136c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    136c:	4b1e      	ldr	r3, [pc, #120]	; (13e8 <usb_serial_flush_callback+0x7c>)
    136e:	781a      	ldrb	r2, [r3, #0]
    1370:	b95a      	cbnz	r2, 138a <usb_serial_flush_callback+0x1e>
    1372:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    1376:	4a1d      	ldr	r2, [pc, #116]	; (13ec <usb_serial_flush_callback+0x80>)
    1378:	7812      	ldrb	r2, [r2, #0]
    137a:	b132      	cbz	r2, 138a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    1380:	4d1b      	ldr	r5, [pc, #108]	; (13f0 <usb_serial_flush_callback+0x84>)
    1382:	882a      	ldrh	r2, [r5, #0]
    1384:	b912      	cbnz	r2, 138c <usb_serial_flush_callback+0x20>
    1386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    138a:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    138c:	4e19      	ldr	r6, [pc, #100]	; (13f4 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    138e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1392:	4f19      	ldr	r7, [pc, #100]	; (13f8 <usb_serial_flush_callback+0x8c>)
    1394:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1396:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1398:	4c18      	ldr	r4, [pc, #96]	; (13fc <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    139a:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    139e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    13a2:	4638      	mov	r0, r7
    13a4:	4621      	mov	r1, r4
    13a6:	f7ff fee5 	bl	1174 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    13aa:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    13ae:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    13b2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    13b6:	4b12      	ldr	r3, [pc, #72]	; (1400 <usb_serial_flush_callback+0x94>)
    13b8:	6019      	str	r1, [r3, #0]
		location += 32;
    13ba:	3120      	adds	r1, #32
	} while (location < end_addr);
    13bc:	428a      	cmp	r2, r1
    13be:	d8fb      	bhi.n	13b8 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    13c0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    13c4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    13c8:	2004      	movs	r0, #4
    13ca:	4639      	mov	r1, r7
    13cc:	f7ff feea 	bl	11a4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    13d0:	7833      	ldrb	r3, [r6, #0]
    13d2:	4a08      	ldr	r2, [pc, #32]	; (13f4 <usb_serial_flush_callback+0x88>)
    13d4:	3301      	adds	r3, #1
    13d6:	b2db      	uxtb	r3, r3
    13d8:	2b03      	cmp	r3, #3
    13da:	bf88      	it	hi
    13dc:	2300      	movhi	r3, #0
    13de:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    13e0:	2300      	movs	r3, #0
    13e2:	802b      	strh	r3, [r5, #0]
    13e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13e8:	20000c76 	.word	0x20000c76
    13ec:	20000c60 	.word	0x20000c60
    13f0:	20000da6 	.word	0x20000da6
    13f4:	20000c77 	.word	0x20000c77
    13f8:	20000dc0 	.word	0x20000dc0
    13fc:	20201060 	.word	0x20201060
    1400:	e000ef70 	.word	0xe000ef70

00001404 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    1404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1408:	b085      	sub	sp, #20
    140a:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    140c:	9101      	str	r1, [sp, #4]
    140e:	2900      	cmp	r1, #0
    1410:	f000 80a2 	beq.w	1558 <usb_serial_write.part.1+0x154>
    1414:	2300      	movs	r3, #0
    1416:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1574 <usb_serial_write.part.1+0x170>
    141a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 1568 <usb_serial_write.part.1+0x164>
    141e:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    1420:	4e4e      	ldr	r6, [pc, #312]	; (155c <usb_serial_write.part.1+0x158>)
    1422:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1426:	f8df a150 	ldr.w	sl, [pc, #336]	; 1578 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    142a:	f8df b150 	ldr.w	fp, [pc, #336]	; 157c <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    142e:	4a4c      	ldr	r2, [pc, #304]	; (1560 <usb_serial_write.part.1+0x15c>)
    1430:	7814      	ldrb	r4, [r2, #0]
    1432:	4a4c      	ldr	r2, [pc, #304]	; (1564 <usb_serial_write.part.1+0x160>)
    1434:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1438:	2b00      	cmp	r3, #0
    143a:	d16e      	bne.n	151a <usb_serial_write.part.1+0x116>
    143c:	461d      	mov	r5, r3
    143e:	461c      	mov	r4, r3
    1440:	e014      	b.n	146c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1442:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    1446:	b904      	cbnz	r4, 144a <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    1448:	6835      	ldr	r5, [r6, #0]
    144a:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    144c:	2b00      	cmp	r3, #0
    144e:	d15e      	bne.n	150e <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1450:	6833      	ldr	r3, [r6, #0]
    1452:	1b5b      	subs	r3, r3, r5
    1454:	2b78      	cmp	r3, #120	; 0x78
    1456:	d879      	bhi.n	154c <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1458:	f89a 3000 	ldrb.w	r3, [sl]
    145c:	2b00      	cmp	r3, #0
    145e:	d056      	beq.n	150e <usb_serial_write.part.1+0x10a>
			yield();
    1460:	f000 fb34 	bl	1acc <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1464:	f8b8 3000 	ldrh.w	r3, [r8]
    1468:	2b00      	cmp	r3, #0
    146a:	d154      	bne.n	1516 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    146c:	4638      	mov	r0, r7
    146e:	f7ff febf 	bl	11f0 <usb_transfer_status>
			if (!(status & 0x80)) {
    1472:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1476:	4a3c      	ldr	r2, [pc, #240]	; (1568 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    1478:	d1e3      	bne.n	1442 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    147a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    147e:	4a38      	ldr	r2, [pc, #224]	; (1560 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    1480:	f889 0000 	strb.w	r0, [r9]
    1484:	7814      	ldrb	r4, [r2, #0]
    1486:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    1488:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    148c:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    148e:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1490:	4936      	ldr	r1, [pc, #216]	; (156c <usb_serial_write.part.1+0x168>)
    1492:	4420      	add	r0, r4
		if (size >= tx_available) {
    1494:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1496:	4408      	add	r0, r1
		if (size >= tx_available) {
    1498:	d343      	bcc.n	1522 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    149a:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    149c:	9902      	ldr	r1, [sp, #8]
    149e:	f000 fb8d 	bl	1bbc <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    14a2:	2300      	movs	r3, #0
    14a4:	4621      	mov	r1, r4
    14a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    14aa:	4638      	mov	r0, r7
    14ac:	f7ff fe62 	bl	1174 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    14b0:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    14b4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    14b8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    14bc:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    14c0:	3320      	adds	r3, #32
	} while (location < end_addr);
    14c2:	429c      	cmp	r4, r3
    14c4:	d8fa      	bhi.n	14bc <usb_serial_write.part.1+0xb8>
	asm("dsb");
    14c6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    14ca:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    14ce:	2004      	movs	r0, #4
    14d0:	4639      	mov	r1, r7
    14d2:	f7ff fe67 	bl	11a4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    14d6:	4b22      	ldr	r3, [pc, #136]	; (1560 <usb_serial_write.part.1+0x15c>)
    14d8:	4a21      	ldr	r2, [pc, #132]	; (1560 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    14da:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    14dc:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    14de:	4824      	ldr	r0, [pc, #144]	; (1570 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    14e0:	3301      	adds	r3, #1
    14e2:	b2db      	uxtb	r3, r3
    14e4:	2b03      	cmp	r3, #3
    14e6:	bf88      	it	hi
    14e8:	2300      	movhi	r3, #0
    14ea:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    14ec:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    14f0:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    14f2:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    14f6:	4413      	add	r3, r2
    14f8:	9300      	str	r3, [sp, #0]
			data += tx_available;
    14fa:	9b02      	ldr	r3, [sp, #8]
    14fc:	4413      	add	r3, r2
    14fe:	9302      	str	r3, [sp, #8]
    1500:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1502:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1506:	9901      	ldr	r1, [sp, #4]
    1508:	1a8a      	subs	r2, r1, r2
    150a:	9201      	str	r2, [sp, #4]
    150c:	d18f      	bne.n	142e <usb_serial_write.part.1+0x2a>
    150e:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1510:	b005      	add	sp, #20
    1512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1516:	4a12      	ldr	r2, [pc, #72]	; (1560 <usb_serial_write.part.1+0x15c>)
    1518:	7814      	ldrb	r4, [r2, #0]
    151a:	461a      	mov	r2, r3
    151c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1520:	e7b4      	b.n	148c <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1522:	9c01      	ldr	r4, [sp, #4]
    1524:	9902      	ldr	r1, [sp, #8]
    1526:	4622      	mov	r2, r4
    1528:	9303      	str	r3, [sp, #12]
    152a:	f000 fb47 	bl	1bbc <memcpy>
			tx_available -= size;
    152e:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1530:	4a0f      	ldr	r2, [pc, #60]	; (1570 <usb_serial_write.part.1+0x16c>)
    1532:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    1536:	1b1b      	subs	r3, r3, r4
    1538:	f8a8 3000 	strh.w	r3, [r8]
    153c:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    153e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    1542:	4618      	mov	r0, r3
    1544:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1546:	b005      	add	sp, #20
    1548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    154c:	2301      	movs	r3, #1
				return sent;
    154e:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1550:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1552:	b005      	add	sp, #20
    1554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1558:	9801      	ldr	r0, [sp, #4]
    155a:	e7d9      	b.n	1510 <usb_serial_write.part.1+0x10c>
    155c:	20000c14 	.word	0x20000c14
    1560:	20000c77 	.word	0x20000c77
    1564:	20000dc0 	.word	0x20000dc0
    1568:	20000da5 	.word	0x20000da5
    156c:	20201060 	.word	0x20201060
    1570:	402e0000 	.word	0x402e0000
    1574:	20000da6 	.word	0x20000da6
    1578:	20000c60 	.word	0x20000c60
    157c:	e000ef70 	.word	0xe000ef70

00001580 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    1580:	4770      	bx	lr
    1582:	bf00      	nop

00001584 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1584:	4b31      	ldr	r3, [pc, #196]	; (164c <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    1586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    158a:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    158c:	4f30      	ldr	r7, [pc, #192]	; (1650 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    158e:	2b00      	cmp	r3, #0
    1590:	d054      	beq.n	163c <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    1592:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    1596:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1684 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    159a:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    159c:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    15a0:	2100      	movs	r1, #0
    15a2:	2280      	movs	r2, #128	; 0x80
    15a4:	482b      	ldr	r0, [pc, #172]	; (1654 <usb_serial_configure+0xd0>)
	tx_head = 0;
    15a6:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    15a8:	4e2b      	ldr	r6, [pc, #172]	; (1658 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    15aa:	f000 ff45 	bl	2438 <memset>
	tx_head = 0;
    15ae:	4c2b      	ldr	r4, [pc, #172]	; (165c <usb_serial_configure+0xd8>)
	tx_available = 0;
    15b0:	4b2b      	ldr	r3, [pc, #172]	; (1660 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    15b2:	4629      	mov	r1, r5
    15b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    15b8:	482a      	ldr	r0, [pc, #168]	; (1664 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    15ba:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    15bc:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    15be:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    15c0:	f000 ff3a 	bl	2438 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    15c4:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    15c6:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    15c8:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    15ca:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    15cc:	60b5      	str	r5, [r6, #8]
    15ce:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    15d0:	4925      	ldr	r1, [pc, #148]	; (1668 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    15d2:	4e26      	ldr	r6, [pc, #152]	; (166c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    15d4:	4826      	ldr	r0, [pc, #152]	; (1670 <usb_serial_configure+0xec>)
	rx_available = 0;
    15d6:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 1688 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    15da:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    15dc:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    15de:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    15e0:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    15e2:	6035      	str	r5, [r6, #0]
    15e4:	6075      	str	r5, [r6, #4]
    15e6:	60b5      	str	r5, [r6, #8]
    15e8:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    15ea:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    15ee:	f7ff fd8d 	bl	110c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    15f2:	f8b8 1000 	ldrh.w	r1, [r8]
    15f6:	462a      	mov	r2, r5
    15f8:	4b1e      	ldr	r3, [pc, #120]	; (1674 <usb_serial_configure+0xf0>)
    15fa:	2003      	movs	r0, #3
    15fc:	f7ff fd54 	bl	10a8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1600:	462b      	mov	r3, r5
    1602:	8839      	ldrh	r1, [r7, #0]
    1604:	2201      	movs	r2, #1
    1606:	2004      	movs	r0, #4
    1608:	f7ff fd80 	bl	110c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    160c:	4620      	mov	r0, r4
    160e:	3401      	adds	r4, #1
    1610:	f7ff fe1c 	bl	124c <rx_queue_transfer>
    1614:	2c08      	cmp	r4, #8
    1616:	d1f9      	bne.n	160c <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    1618:	4b17      	ldr	r3, [pc, #92]	; (1678 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    161a:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    161c:	4817      	ldr	r0, [pc, #92]	; (167c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    161e:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1620:	4c17      	ldr	r4, [pc, #92]	; (1680 <usb_serial_configure+0xfc>)
    1622:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1624:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    162c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1630:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1634:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    163c:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    163e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1684 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1642:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1644:	f8a8 3000 	strh.w	r3, [r8]
    1648:	e7aa      	b.n	15a0 <usb_serial_configure+0x1c>
    164a:	bf00      	nop
    164c:	20000c3c 	.word	0x20000c3c
    1650:	20000c74 	.word	0x20000c74
    1654:	20000dc0 	.word	0x20000dc0
    1658:	20000d90 	.word	0x20000d90
    165c:	20000c77 	.word	0x20000c77
    1660:	20000da6 	.word	0x20000da6
    1664:	20000c80 	.word	0x20000c80
    1668:	20000da4 	.word	0x20000da4
    166c:	20000c64 	.word	0x20000c64
    1670:	20000d80 	.word	0x20000d80
    1674:	000012b9 	.word	0x000012b9
    1678:	402e0000 	.word	0x402e0000
    167c:	20000c2c 	.word	0x20000c2c
    1680:	0000136d 	.word	0x0000136d
    1684:	20000d8e 	.word	0x20000d8e
    1688:	20000da0 	.word	0x20000da0

0000168c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    168c:	4b31      	ldr	r3, [pc, #196]	; (1754 <usb_serial_read+0xc8>)
    168e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1696:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1698:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    169a:	4b2f      	ldr	r3, [pc, #188]	; (1758 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    169c:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    169e:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    16a0:	2900      	cmp	r1, #0
    16a2:	d053      	beq.n	174c <usb_serial_read+0xc0>
    16a4:	4b2d      	ldr	r3, [pc, #180]	; (175c <usb_serial_read+0xd0>)
    16a6:	b2e4      	uxtb	r4, r4
    16a8:	781b      	ldrb	r3, [r3, #0]
    16aa:	429c      	cmp	r4, r3
    16ac:	d050      	beq.n	1750 <usb_serial_read+0xc4>
    16ae:	4682      	mov	sl, r0
    16b0:	2700      	movs	r7, #0
    16b2:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 1774 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    16b6:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    16b8:	4b29      	ldr	r3, [pc, #164]	; (1760 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    16ba:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    16be:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    16c0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    16c2:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    16c4:	4b27      	ldr	r3, [pc, #156]	; (1764 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    16c6:	bf28      	it	cs
    16c8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    16ca:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    16cc:	4b24      	ldr	r3, [pc, #144]	; (1760 <usb_serial_read+0xd4>)
    16ce:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    16d2:	4b25      	ldr	r3, [pc, #148]	; (1768 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    16d4:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    16d8:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    16dc:	4b23      	ldr	r3, [pc, #140]	; (176c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    16de:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    16e2:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    16e4:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    16e6:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    16e8:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    16ea:	d219      	bcs.n	1720 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    16ec:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    16f0:	4642      	mov	r2, r8
    16f2:	4419      	add	r1, r3
    16f4:	f000 fa62 	bl	1bbc <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    16f8:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    16fa:	f8db 1000 	ldr.w	r1, [fp]
    16fe:	4648      	mov	r0, r9
			rx_index[i] += len;
    1700:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1704:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    1708:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    170a:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    170e:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1712:	4b17      	ldr	r3, [pc, #92]	; (1770 <usb_serial_read+0xe4>)
    1714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1718:	601a      	str	r2, [r3, #0]
	return count;
}
    171a:	b003      	add	sp, #12
    171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1720:	f000 fa4c 	bl	1bbc <memcpy>
			p += avail;
			rx_available -= avail;
    1724:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1728:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    172a:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    172c:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    172e:	44b2      	add	sl, r6
			rx_available -= avail;
    1730:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1734:	4a08      	ldr	r2, [pc, #32]	; (1758 <usb_serial_read+0xcc>)
    1736:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    1738:	f7ff fd88 	bl	124c <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    173c:	45b9      	cmp	r9, r7
    173e:	d903      	bls.n	1748 <usb_serial_read+0xbc>
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <usb_serial_read+0xd0>)
    1742:	781b      	ldrb	r3, [r3, #0]
    1744:	429c      	cmp	r4, r3
    1746:	d1b6      	bne.n	16b6 <usb_serial_read+0x2a>
    1748:	4638      	mov	r0, r7
    174a:	e7e2      	b.n	1712 <usb_serial_read+0x86>
    174c:	4608      	mov	r0, r1
    174e:	e7e0      	b.n	1712 <usb_serial_read+0x86>
    1750:	2000      	movs	r0, #0
    1752:	e7de      	b.n	1712 <usb_serial_read+0x86>
    1754:	e000e18c 	.word	0xe000e18c
    1758:	20000d80 	.word	0x20000d80
    175c:	20000da4 	.word	0x20000da4
    1760:	20000c64 	.word	0x20000c64
    1764:	20000d84 	.word	0x20000d84
    1768:	20000d90 	.word	0x20000d90
    176c:	20200060 	.word	0x20200060
    1770:	e000e10c 	.word	0xe000e10c
    1774:	20000da0 	.word	0x20000da0

00001778 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1778:	4b0b      	ldr	r3, [pc, #44]	; (17a8 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    177a:	4a0c      	ldr	r2, [pc, #48]	; (17ac <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    177c:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    177e:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1780:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1782:	4293      	cmp	r3, r2
    1784:	d00d      	beq.n	17a2 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1786:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1788:	4809      	ldr	r0, [pc, #36]	; (17b0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    178a:	4a0a      	ldr	r2, [pc, #40]	; (17b4 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    178c:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    178e:	490a      	ldr	r1, [pc, #40]	; (17b8 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1790:	bf28      	it	cs
    1792:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1794:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1796:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    179a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    179e:	5c58      	ldrb	r0, [r3, r1]
    17a0:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    17a2:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    17a6:	4770      	bx	lr
    17a8:	20000d80 	.word	0x20000d80
    17ac:	20000da4 	.word	0x20000da4
    17b0:	20000d84 	.word	0x20000d84
    17b4:	20200060 	.word	0x20200060
    17b8:	20000c64 	.word	0x20000c64

000017bc <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    17bc:	4b01      	ldr	r3, [pc, #4]	; (17c4 <usb_serial_available+0x8>)
    17be:	6818      	ldr	r0, [r3, #0]
}
    17c0:	4770      	bx	lr
    17c2:	bf00      	nop
    17c4:	20000da0 	.word	0x20000da0

000017c8 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    17c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    17cc:	4e15      	ldr	r6, [pc, #84]	; (1824 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    17ce:	4d16      	ldr	r5, [pc, #88]	; (1828 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    17d0:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    17d2:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    17d4:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    17d6:	429c      	cmp	r4, r3
    17d8:	d021      	beq.n	181e <usb_serial_flush_input+0x56>
    17da:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1830 <usb_serial_flush_input+0x68>
    17de:	f8df b054 	ldr.w	fp, [pc, #84]	; 1834 <usb_serial_flush_input+0x6c>
    17e2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1838 <usb_serial_flush_input+0x70>
    17e6:	4f11      	ldr	r7, [pc, #68]	; (182c <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    17e8:	3401      	adds	r4, #1
    17ea:	2c08      	cmp	r4, #8
    17ec:	fa5f fa84 	uxtb.w	sl, r4
    17f0:	d901      	bls.n	17f6 <usb_serial_flush_input+0x2e>
    17f2:	2400      	movs	r4, #0
    17f4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    17f6:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    17fa:	f8db 2000 	ldr.w	r2, [fp]
    17fe:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    1802:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1804:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    1808:	1a5b      	subs	r3, r3, r1
    180a:	1ad3      	subs	r3, r2, r3
    180c:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    1810:	f7ff fd1c 	bl	124c <rx_queue_transfer>
		rx_tail = tail;
    1814:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    1818:	782b      	ldrb	r3, [r5, #0]
    181a:	429c      	cmp	r4, r3
    181c:	d1e4      	bne.n	17e8 <usb_serial_flush_input+0x20>
    181e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1822:	bf00      	nop
    1824:	20000d80 	.word	0x20000d80
    1828:	20000da4 	.word	0x20000da4
    182c:	20000c64 	.word	0x20000c64
    1830:	20000d84 	.word	0x20000d84
    1834:	20000da0 	.word	0x20000da0
    1838:	20000d90 	.word	0x20000d90

0000183c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    183c:	b500      	push	{lr}
    183e:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    1840:	2101      	movs	r1, #1
    1842:	f10d 0007 	add.w	r0, sp, #7
    1846:	f7ff ff21 	bl	168c <usb_serial_read>
    184a:	b120      	cbz	r0, 1856 <usb_serial_getchar+0x1a>
    184c:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    1850:	b003      	add	sp, #12
    1852:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    1856:	f04f 30ff 	mov.w	r0, #4294967295
    185a:	e7f9      	b.n	1850 <usb_serial_getchar+0x14>

0000185c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    185c:	4b09      	ldr	r3, [pc, #36]	; (1884 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    185e:	b500      	push	{lr}
    1860:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1862:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1864:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1868:	b923      	cbnz	r3, 1874 <usb_serial_putchar+0x18>
    186a:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    186e:	b003      	add	sp, #12
    1870:	f85d fb04 	ldr.w	pc, [sp], #4
    1874:	2101      	movs	r1, #1
    1876:	f10d 0007 	add.w	r0, sp, #7
    187a:	f7ff fdc3 	bl	1404 <usb_serial_write.part.1>
    187e:	b003      	add	sp, #12
    1880:	f85d fb04 	ldr.w	pc, [sp], #4
    1884:	20000c60 	.word	0x20000c60

00001888 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1888:	4b04      	ldr	r3, [pc, #16]	; (189c <usb_serial_write+0x14>)
    188a:	781b      	ldrb	r3, [r3, #0]
    188c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1890:	b10b      	cbz	r3, 1896 <usb_serial_write+0xe>
    1892:	f7ff bdb7 	b.w	1404 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1896:	4610      	mov	r0, r2
    1898:	4770      	bx	lr
    189a:	bf00      	nop
    189c:	20000c60 	.word	0x20000c60

000018a0 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    18a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    18a4:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    18a6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 18e8 <usb_serial_write_buffer_free+0x48>
    18aa:	2301      	movs	r3, #1
    18ac:	4d0c      	ldr	r5, [pc, #48]	; (18e0 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    18ae:	4627      	mov	r7, r4
    18b0:	4e0c      	ldr	r6, [pc, #48]	; (18e4 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    18b2:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    18b6:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    18b8:	4628      	mov	r0, r5
    18ba:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    18bc:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    18be:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    18c2:	d005      	beq.n	18d0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    18c4:	f7ff fc94 	bl	11f0 <usb_transfer_status>
    18c8:	0603      	lsls	r3, r0, #24
    18ca:	bf58      	it	pl
    18cc:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    18d0:	2c04      	cmp	r4, #4
    18d2:	d1f0      	bne.n	18b6 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    18d4:	2300      	movs	r3, #0
	return sum;
}
    18d6:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    18d8:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    18dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18e0:	20000dc0 	.word	0x20000dc0
    18e4:	20000c77 	.word	0x20000c77
    18e8:	20000c76 	.word	0x20000c76

000018ec <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    18ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    18f0:	4b1f      	ldr	r3, [pc, #124]	; (1970 <usb_serial_flush_output+0x84>)
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	b113      	cbz	r3, 18fc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    18f6:	4d1f      	ldr	r5, [pc, #124]	; (1974 <usb_serial_flush_output+0x88>)
    18f8:	882a      	ldrh	r2, [r5, #0]
    18fa:	b90a      	cbnz	r2, 1900 <usb_serial_flush_output+0x14>
    18fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1900:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1988 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1904:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1908:	4e1b      	ldr	r6, [pc, #108]	; (1978 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    190a:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    190e:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1912:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1914:	4c19      	ldr	r4, [pc, #100]	; (197c <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1916:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1918:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    191c:	4f18      	ldr	r7, [pc, #96]	; (1980 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    191e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1922:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1924:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1928:	4621      	mov	r1, r4
    192a:	f7ff fc23 	bl	1174 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    192e:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1932:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1936:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    193a:	4b12      	ldr	r3, [pc, #72]	; (1984 <usb_serial_flush_output+0x98>)
    193c:	6019      	str	r1, [r3, #0]
		location += 32;
    193e:	3120      	adds	r1, #32
	} while (location < end_addr);
    1940:	428a      	cmp	r2, r1
    1942:	d8fb      	bhi.n	193c <usb_serial_flush_output+0x50>
	asm("dsb");
    1944:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1948:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    194c:	2004      	movs	r0, #4
    194e:	4631      	mov	r1, r6
    1950:	f7ff fc28 	bl	11a4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1954:	f898 3000 	ldrb.w	r3, [r8]
    1958:	4a0b      	ldr	r2, [pc, #44]	; (1988 <usb_serial_flush_output+0x9c>)
    195a:	3301      	adds	r3, #1
    195c:	b2db      	uxtb	r3, r3
    195e:	2b03      	cmp	r3, #3
    1960:	bf88      	it	hi
    1962:	2300      	movhi	r3, #0
    1964:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1966:	2300      	movs	r3, #0
    1968:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    196a:	703b      	strb	r3, [r7, #0]
    196c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1970:	20000c60 	.word	0x20000c60
    1974:	20000da6 	.word	0x20000da6
    1978:	20000dc0 	.word	0x20000dc0
    197c:	20201060 	.word	0x20201060
    1980:	20000c76 	.word	0x20000c76
    1984:	e000ef70 	.word	0xe000ef70
    1988:	20000c77 	.word	0x20000c77

0000198c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    198c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    198e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1992:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1994:	4c0c      	ldr	r4, [pc, #48]	; (19c8 <EventResponder::runFromInterrupt()+0x3c>)
    1996:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1998:	b18b      	cbz	r3, 19be <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    199a:	4e0c      	ldr	r6, [pc, #48]	; (19cc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    199c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    199e:	695a      	ldr	r2, [r3, #20]
    19a0:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    19a2:	b17a      	cbz	r2, 19c4 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    19a4:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    19a6:	b901      	cbnz	r1, 19aa <EventResponder::runFromInterrupt()+0x1e>
    19a8:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    19aa:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    19ac:	4618      	mov	r0, r3
    19ae:	689b      	ldr	r3, [r3, #8]
    19b0:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    19b2:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    19b6:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    19b8:	6823      	ldr	r3, [r4, #0]
		if (first) {
    19ba:	2b00      	cmp	r3, #0
    19bc:	d1ef      	bne.n	199e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    19be:	b901      	cbnz	r1, 19c2 <EventResponder::runFromInterrupt()+0x36>
    19c0:	b662      	cpsie	i
    19c2:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    19c4:	6032      	str	r2, [r6, #0]
    19c6:	e7ee      	b.n	19a6 <EventResponder::runFromInterrupt()+0x1a>
    19c8:	20000e40 	.word	0x20000e40
    19cc:	20000e44 	.word	0x20000e44

000019d0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    19d0:	f7ff bfdc 	b.w	198c <EventResponder::runFromInterrupt()>

000019d4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    19d4:	4a04      	ldr	r2, [pc, #16]	; (19e8 <systick_isr+0x14>)
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <systick_isr+0x18>)
    19d8:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    19da:	4a05      	ldr	r2, [pc, #20]	; (19f0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    19dc:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    19de:	6813      	ldr	r3, [r2, #0]
    19e0:	3301      	adds	r3, #1
    19e2:	6013      	str	r3, [r2, #0]
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop
    19e8:	e0001004 	.word	0xe0001004
    19ec:	20000c0c 	.word	0x20000c0c
    19f0:	20000c14 	.word	0x20000c14

000019f4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    19f4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    19f6:	f7fe fb41 	bl	7c <setup>
	while (1) {
		loop();
    19fa:	f7fe fb91 	bl	120 <loop>
		yield();
    19fe:	f000 f865 	bl	1acc <yield>
    1a02:	e7fa      	b.n	19fa <main+0x6>

00001a04 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    1a04:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    1a06:	4c06      	ldr	r4, [pc, #24]	; (1a20 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    1a08:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    1a0a:	6803      	ldr	r3, [r0, #0]
    1a0c:	2202      	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1a0e:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    1a10:	a901      	add	r1, sp, #4
    1a12:	685b      	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1a14:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    1a18:	4798      	blx	r3
}
    1a1a:	b002      	add	sp, #8
    1a1c:	bd10      	pop	{r4, pc}
    1a1e:	bf00      	nop
    1a20:	2000046c 	.word	0x2000046c

00001a24 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    1a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a26:	4606      	mov	r6, r0
    1a28:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    1a2a:	2a00      	cmp	r2, #0
    1a2c:	d033      	beq.n	1a96 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    1a2e:	2a01      	cmp	r2, #1
    1a30:	bf08      	it	eq
    1a32:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    1a34:	b351      	cbz	r1, 1a8c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    1a36:	2521      	movs	r5, #33	; 0x21
    1a38:	e000      	b.n	1a3c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    1a3a:	b2fd      	uxtb	r5, r7
    1a3c:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    1a3e:	fbb1 f4f2 	udiv	r4, r1, r2
    1a42:	fb02 1114 	mls	r1, r2, r4, r1
    1a46:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1a48:	2909      	cmp	r1, #9
    1a4a:	f100 0137 	add.w	r1, r0, #55	; 0x37
    1a4e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1a52:	bf88      	it	hi
    1a54:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    1a56:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1a58:	ac0a      	add	r4, sp, #40	; 0x28
    1a5a:	bf98      	it	ls
    1a5c:	b2c0      	uxtbls	r0, r0
    1a5e:	442c      	add	r4, r5
    1a60:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    1a64:	2900      	cmp	r1, #0
    1a66:	d1e8      	bne.n	1a3a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    1a68:	b133      	cbz	r3, 1a78 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    1a6a:	3d01      	subs	r5, #1
		buf[i] = '-';
    1a6c:	ab0a      	add	r3, sp, #40	; 0x28
    1a6e:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    1a70:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    1a72:	442b      	add	r3, r5
    1a74:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    1a78:	6833      	ldr	r3, [r6, #0]
    1a7a:	a901      	add	r1, sp, #4
    1a7c:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    1a80:	4630      	mov	r0, r6
    1a82:	4429      	add	r1, r5
    1a84:	685b      	ldr	r3, [r3, #4]
    1a86:	4798      	blx	r3
}
    1a88:	b00b      	add	sp, #44	; 0x2c
    1a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1a8c:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    1a8e:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    1a90:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    1a94:	e7e8      	b.n	1a68 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    1a96:	6803      	ldr	r3, [r0, #0]
    1a98:	b2c9      	uxtb	r1, r1
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    1a9e:	b00b      	add	sp, #44	; 0x2c
    1aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aa2:	bf00      	nop

00001aa4 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    1aa4:	f7ff be90 	b.w	17c8 <usb_serial_flush_input>

00001aa8 <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    1aa8:	f7ff be66 	b.w	1778 <usb_serial_peekchar>

00001aac <usb_serial_class::read()>:
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1aac:	f7ff bec6 	b.w	183c <usb_serial_getchar>

00001ab0 <usb_serial_class::available()>:
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1ab0:	f7ff be84 	b.w	17bc <usb_serial_available>

00001ab4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1ab4:	f7ff bf1a 	b.w	18ec <usb_serial_flush_output>

00001ab8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1ab8:	f7ff bef2 	b.w	18a0 <usb_serial_write_buffer_free>

00001abc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1abc:	4608      	mov	r0, r1
    1abe:	4611      	mov	r1, r2
    1ac0:	f7ff bee2 	b.w	1888 <usb_serial_write>

00001ac4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1ac4:	4608      	mov	r0, r1
    1ac6:	f7ff bec9 	b.w	185c <usb_serial_putchar>
    1aca:	bf00      	nop

00001acc <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    1ad0:	4e32      	ldr	r6, [pc, #200]	; (1b9c <yield+0xd0>)
    1ad2:	7833      	ldrb	r3, [r6, #0]
    1ad4:	b193      	cbz	r3, 1afc <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    1ad6:	4f32      	ldr	r7, [pc, #200]	; (1ba0 <yield+0xd4>)
    1ad8:	783a      	ldrb	r2, [r7, #0]
    1ada:	b97a      	cbnz	r2, 1afc <yield+0x30>
	running = 1;
    1adc:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    1ade:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1ae0:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    1ae2:	d437      	bmi.n	1b54 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    1ae4:	079a      	lsls	r2, r3, #30
    1ae6:	d419      	bmi.n	1b1c <yield+0x50>

	running = 0;
    1ae8:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    1aea:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    1aec:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    1aee:	d505      	bpl.n	1afc <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1af0:	4b2c      	ldr	r3, [pc, #176]	; (1ba4 <yield+0xd8>)
    1af2:	681a      	ldr	r2, [r3, #0]
    1af4:	b112      	cbz	r2, 1afc <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1af6:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1afa:	b10a      	cbz	r2, 1b00 <yield+0x34>
    1afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1b00:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    1b04:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1b06:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    1b08:	b11a      	cbz	r2, 1b12 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    1b0a:	4c27      	ldr	r4, [pc, #156]	; (1ba8 <yield+0xdc>)
    1b0c:	7821      	ldrb	r1, [r4, #0]
    1b0e:	2900      	cmp	r1, #0
    1b10:	d02f      	beq.n	1b72 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1b12:	2800      	cmp	r0, #0
    1b14:	d1f2      	bne.n	1afc <yield+0x30>
    1b16:	b662      	cpsie	i
    1b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1b1c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1bb4 <yield+0xe8>
    1b20:	f898 2000 	ldrb.w	r2, [r8]
    1b24:	2a00      	cmp	r2, #0
    1b26:	d0df      	beq.n	1ae8 <yield+0x1c>
    1b28:	2400      	movs	r4, #0
    1b2a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1bb8 <yield+0xec>
    1b2e:	e005      	b.n	1b3c <yield+0x70>
    1b30:	3401      	adds	r4, #1
    1b32:	f898 3000 	ldrb.w	r3, [r8]
    1b36:	b2e4      	uxtb	r4, r4
    1b38:	42a3      	cmp	r3, r4
    1b3a:	d913      	bls.n	1b64 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    1b3c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    1b40:	682b      	ldr	r3, [r5, #0]
    1b42:	4628      	mov	r0, r5
    1b44:	691b      	ldr	r3, [r3, #16]
    1b46:	4798      	blx	r3
    1b48:	2800      	cmp	r0, #0
    1b4a:	d0f1      	beq.n	1b30 <yield+0x64>
    1b4c:	696b      	ldr	r3, [r5, #20]
    1b4e:	689b      	ldr	r3, [r3, #8]
    1b50:	4798      	blx	r3
    1b52:	e7ed      	b.n	1b30 <yield+0x64>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1b54:	f7ff fe32 	bl	17bc <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    1b58:	b9d0      	cbnz	r0, 1b90 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    1b5a:	4b14      	ldr	r3, [pc, #80]	; (1bac <yield+0xe0>)
    1b5c:	781b      	ldrb	r3, [r3, #0]
    1b5e:	b91b      	cbnz	r3, 1b68 <yield+0x9c>
    1b60:	7833      	ldrb	r3, [r6, #0]
    1b62:	e7bf      	b.n	1ae4 <yield+0x18>
    1b64:	7833      	ldrb	r3, [r6, #0]
    1b66:	e7bf      	b.n	1ae8 <yield+0x1c>
    1b68:	7833      	ldrb	r3, [r6, #0]
    1b6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1b6e:	7033      	strb	r3, [r6, #0]
    1b70:	e7b8      	b.n	1ae4 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1b72:	2601      	movs	r6, #1
		firstYield = first->_next;
    1b74:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1b76:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    1b78:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    1b7a:	b165      	cbz	r5, 1b96 <yield+0xca>
			firstYield->_prev = nullptr;
    1b7c:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1b7e:	b900      	cbnz	r0, 1b82 <yield+0xb6>
    1b80:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1b82:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    1b84:	6893      	ldr	r3, [r2, #8]
    1b86:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1b88:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    1b8a:	4798      	blx	r3
		runningFromYield = false;
    1b8c:	7025      	strb	r5, [r4, #0]
    1b8e:	e7b5      	b.n	1afc <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    1b90:	f000 fc04 	bl	239c <serialEvent()>
    1b94:	e7e1      	b.n	1b5a <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    1b96:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <yield+0xe4>)
    1b98:	601d      	str	r5, [r3, #0]
    1b9a:	e7f0      	b.n	1b7e <yield+0xb2>
    1b9c:	200005ec 	.word	0x200005ec
    1ba0:	20000e51 	.word	0x20000e51
    1ba4:	20000e4c 	.word	0x20000e4c
    1ba8:	20000e50 	.word	0x20000e50
    1bac:	60001b4a 	.word	0x60001b4a
    1bb0:	20000e48 	.word	0x20000e48
    1bb4:	20000e74 	.word	0x20000e74
    1bb8:	20000e54 	.word	0x20000e54

00001bbc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1bbc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1bbe:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1bc2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1bc6:	d16d      	bne.n	1ca4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1bc8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1bca:	d341      	bcc.n	1c50 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1bcc:	f851 3b04 	ldr.w	r3, [r1], #4
    1bd0:	f840 3b04 	str.w	r3, [r0], #4
    1bd4:	f851 3b04 	ldr.w	r3, [r1], #4
    1bd8:	f840 3b04 	str.w	r3, [r0], #4
    1bdc:	f851 3b04 	ldr.w	r3, [r1], #4
    1be0:	f840 3b04 	str.w	r3, [r0], #4
    1be4:	f851 3b04 	ldr.w	r3, [r1], #4
    1be8:	f840 3b04 	str.w	r3, [r0], #4
    1bec:	f851 3b04 	ldr.w	r3, [r1], #4
    1bf0:	f840 3b04 	str.w	r3, [r0], #4
    1bf4:	f851 3b04 	ldr.w	r3, [r1], #4
    1bf8:	f840 3b04 	str.w	r3, [r0], #4
    1bfc:	f851 3b04 	ldr.w	r3, [r1], #4
    1c00:	f840 3b04 	str.w	r3, [r0], #4
    1c04:	f851 3b04 	ldr.w	r3, [r1], #4
    1c08:	f840 3b04 	str.w	r3, [r0], #4
    1c0c:	f851 3b04 	ldr.w	r3, [r1], #4
    1c10:	f840 3b04 	str.w	r3, [r0], #4
    1c14:	f851 3b04 	ldr.w	r3, [r1], #4
    1c18:	f840 3b04 	str.w	r3, [r0], #4
    1c1c:	f851 3b04 	ldr.w	r3, [r1], #4
    1c20:	f840 3b04 	str.w	r3, [r0], #4
    1c24:	f851 3b04 	ldr.w	r3, [r1], #4
    1c28:	f840 3b04 	str.w	r3, [r0], #4
    1c2c:	f851 3b04 	ldr.w	r3, [r1], #4
    1c30:	f840 3b04 	str.w	r3, [r0], #4
    1c34:	f851 3b04 	ldr.w	r3, [r1], #4
    1c38:	f840 3b04 	str.w	r3, [r0], #4
    1c3c:	f851 3b04 	ldr.w	r3, [r1], #4
    1c40:	f840 3b04 	str.w	r3, [r0], #4
    1c44:	f851 3b04 	ldr.w	r3, [r1], #4
    1c48:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1c4c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1c4e:	d2bd      	bcs.n	1bcc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1c50:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1c52:	d311      	bcc.n	1c78 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1c54:	f851 3b04 	ldr.w	r3, [r1], #4
    1c58:	f840 3b04 	str.w	r3, [r0], #4
    1c5c:	f851 3b04 	ldr.w	r3, [r1], #4
    1c60:	f840 3b04 	str.w	r3, [r0], #4
    1c64:	f851 3b04 	ldr.w	r3, [r1], #4
    1c68:	f840 3b04 	str.w	r3, [r0], #4
    1c6c:	f851 3b04 	ldr.w	r3, [r1], #4
    1c70:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1c74:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1c76:	d2ed      	bcs.n	1c54 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1c78:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1c7a:	d305      	bcc.n	1c88 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1c7c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1c80:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1c84:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1c86:	d2f9      	bcs.n	1c7c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1c88:	3204      	adds	r2, #4
	beq	.Ldone
    1c8a:	d008      	beq.n	1c9e <memcpy+0xe2>

	lsls	r2, r2, #31
    1c8c:	07d2      	lsls	r2, r2, #31
	itt ne
    1c8e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1c90:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1c94:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1c98:	d301      	bcc.n	1c9e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1c9a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1c9c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1c9e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1ca0:	4770      	bx	lr
    1ca2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1ca4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1ca6:	d313      	bcc.n	1cd0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1ca8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1caa:	d08d      	beq.n	1bc8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1cac:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1cb0:	d08a      	beq.n	1bc8 <memcpy+0xc>

	rsb	r3, #4
    1cb2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1cb6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1cb8:	07db      	lsls	r3, r3, #31
	itt ne
    1cba:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1cbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1cc0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1cc4:	d380      	bcc.n	1bc8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1cc6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1cca:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1cce:	e77b      	b.n	1bc8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1cd0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    1cd2:	d3d9      	bcc.n	1c88 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1cd4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    1cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1cda:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1cde:	d2f9      	bcs.n	1cd4 <memcpy+0x118>

	ldrb	r3, [r1]
    1ce0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1ce2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1ce4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1ce6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1ce8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1cea:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1cec:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1cee:	4770      	bx	lr

00001cf0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1cf0:	4a96      	ldr	r2, [pc, #600]	; (1f4c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1cf2:	4b97      	ldr	r3, [pc, #604]	; (1f50 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1cf4:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1cfa:	4c96      	ldr	r4, [pc, #600]	; (1f54 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1cfc:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1d00:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1d02:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1d04:	d91c      	bls.n	1d40 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1d06:	4b94      	ldr	r3, [pc, #592]	; (1f58 <set_arm_clock+0x268>)
    1d08:	4298      	cmp	r0, r3
    1d0a:	f240 8115 	bls.w	1f38 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1d0e:	4b93      	ldr	r3, [pc, #588]	; (1f5c <set_arm_clock+0x26c>)
    1d10:	f240 6527 	movw	r5, #1575	; 0x627
    1d14:	4f92      	ldr	r7, [pc, #584]	; (1f60 <set_arm_clock+0x270>)
    1d16:	4403      	add	r3, r0
    1d18:	4c92      	ldr	r4, [pc, #584]	; (1f64 <set_arm_clock+0x274>)
    1d1a:	0a1a      	lsrs	r2, r3, #8
    1d1c:	fba7 3202 	umull	r3, r2, r7, r2
    1d20:	09d3      	lsrs	r3, r2, #7
    1d22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d26:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1d2a:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    1d2e:	42ab      	cmp	r3, r5
    1d30:	bf28      	it	cs
    1d32:	462b      	movcs	r3, r5
    1d34:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1d38:	fba4 3503 	umull	r3, r5, r4, r3
    1d3c:	08ed      	lsrs	r5, r5, #3
    1d3e:	e004      	b.n	1d4a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1d40:	4d89      	ldr	r5, [pc, #548]	; (1f68 <set_arm_clock+0x278>)
    1d42:	42a8      	cmp	r0, r5
    1d44:	bf94      	ite	ls
    1d46:	2506      	movls	r5, #6
    1d48:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1d4a:	4a81      	ldr	r2, [pc, #516]	; (1f50 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1d4c:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1d50:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1d54:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1d5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1d5e:	d20a      	bcs.n	1d76 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1d60:	4b7c      	ldr	r3, [pc, #496]	; (1f54 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1d62:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1d66:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1d68:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1d6a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1d6c:	6813      	ldr	r3, [r2, #0]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	dafc      	bge.n	1d6c <set_arm_clock+0x7c>
    1d72:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1d76:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    1d7a:	d131      	bne.n	1de0 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1d7c:	4c7b      	ldr	r4, [pc, #492]	; (1f6c <set_arm_clock+0x27c>)
    1d7e:	4a7c      	ldr	r2, [pc, #496]	; (1f70 <set_arm_clock+0x280>)
    1d80:	f8d4 c010 	ldr.w	ip, [r4, #16]
    1d84:	4614      	mov	r4, r2
    1d86:	ea0c 0202 	and.w	r2, ip, r2
    1d8a:	42a2      	cmp	r2, r4
    1d8c:	bf0a      	itet	eq
    1d8e:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    1d92:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    1d96:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1d98:	ea8e 0403 	eor.w	r4, lr, r3
    1d9c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1da0:	d008      	beq.n	1db4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1da2:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1da6:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1daa:	4c69      	ldr	r4, [pc, #420]	; (1f50 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1dac:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1db0:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1db4:	ea81 0302 	eor.w	r3, r1, r2
    1db8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    1dbc:	d008      	beq.n	1dd0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1dbe:	4b64      	ldr	r3, [pc, #400]	; (1f50 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1dc0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1dc4:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1dc6:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1dc8:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1dca:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1dcc:	071c      	lsls	r4, r3, #28
    1dce:	d4fc      	bmi.n	1dca <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1dd0:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1dd4:	4a5e      	ldr	r2, [pc, #376]	; (1f50 <set_arm_clock+0x260>)
    1dd6:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1ddc:	0699      	lsls	r1, r3, #26
    1dde:	d4fc      	bmi.n	1dda <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1de0:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1de2:	4c64      	ldr	r4, [pc, #400]	; (1f74 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1de4:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1de6:	fb01 f302 	mul.w	r3, r1, r2
    1dea:	fb00 f303 	mul.w	r3, r0, r3
    1dee:	42a3      	cmp	r3, r4
    1df0:	d809      	bhi.n	1e06 <set_arm_clock+0x116>
		if (div_arm < 8) {
    1df2:	2a07      	cmp	r2, #7
    1df4:	f200 8095 	bhi.w	1f22 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    1df8:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1dfa:	fb01 f302 	mul.w	r3, r1, r2
    1dfe:	fb00 f303 	mul.w	r3, r0, r3
    1e02:	42a3      	cmp	r3, r4
    1e04:	d9f5      	bls.n	1df2 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1e06:	485c      	ldr	r0, [pc, #368]	; (1f78 <set_arm_clock+0x288>)
    1e08:	4c5c      	ldr	r4, [pc, #368]	; (1f7c <set_arm_clock+0x28c>)
    1e0a:	4418      	add	r0, r3
    1e0c:	fba4 0300 	umull	r0, r3, r4, r0
    1e10:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1e12:	2b6c      	cmp	r3, #108	; 0x6c
    1e14:	f200 808b 	bhi.w	1f2e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1e18:	2b35      	cmp	r3, #53	; 0x35
    1e1a:	f200 808f 	bhi.w	1f3c <set_arm_clock+0x24c>
    1e1e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 1fa8 <set_arm_clock+0x2b8>
    1e22:	2336      	movs	r3, #54	; 0x36
    1e24:	4856      	ldr	r0, [pc, #344]	; (1f80 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1e26:	f8df c144 	ldr.w	ip, [pc, #324]	; 1f6c <set_arm_clock+0x27c>
    1e2a:	4c56      	ldr	r4, [pc, #344]	; (1f84 <set_arm_clock+0x294>)
    1e2c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1e30:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1e34:	ea09 0404 	and.w	r4, r9, r4
    1e38:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1e3a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1e3e:	d00b      	beq.n	1e58 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1e44:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1e48:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1e4a:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1e4e:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1e52:	6823      	ldr	r3, [r4, #0]
    1e54:	2b00      	cmp	r3, #0
    1e56:	dafc      	bge.n	1e52 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1e58:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 1f50 <set_arm_clock+0x260>
    1e5c:	3a01      	subs	r2, #1
    1e5e:	f8dc 3010 	ldr.w	r3, [ip, #16]
    1e62:	f003 0307 	and.w	r3, r3, #7
    1e66:	4293      	cmp	r3, r2
    1e68:	d007      	beq.n	1e7a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1e6a:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1e6e:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1e70:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1e74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e76:	03db      	lsls	r3, r3, #15
    1e78:	d4fc      	bmi.n	1e74 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1e7a:	3901      	subs	r1, #1
    1e7c:	0289      	lsls	r1, r1, #10
    1e7e:	ea8e 0301 	eor.w	r3, lr, r1
    1e82:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    1e86:	d00c      	beq.n	1ea2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1e88:	4b31      	ldr	r3, [pc, #196]	; (1f50 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1e8a:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1e8e:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1e92:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1e94:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1e98:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1e9c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1e9e:	0799      	lsls	r1, r3, #30
    1ea0:	d4fc      	bmi.n	1e9c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1ea2:	4b39      	ldr	r3, [pc, #228]	; (1f88 <set_arm_clock+0x298>)
    1ea4:	4939      	ldr	r1, [pc, #228]	; (1f8c <set_arm_clock+0x29c>)
    1ea6:	4403      	add	r3, r0
    1ea8:	09db      	lsrs	r3, r3, #7
    1eaa:	fba1 3103 	umull	r3, r1, r1, r3
    1eae:	0b09      	lsrs	r1, r1, #12
    1eb0:	2904      	cmp	r1, #4
    1eb2:	bf28      	it	cs
    1eb4:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1eb6:	1e4b      	subs	r3, r1, #1
    1eb8:	021b      	lsls	r3, r3, #8
    1eba:	ea8e 0203 	eor.w	r2, lr, r3
    1ebe:	f412 7f40 	tst.w	r2, #768	; 0x300
    1ec2:	d007      	beq.n	1ed4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1ec4:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1ecc:	4a20      	ldr	r2, [pc, #128]	; (1f50 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1ece:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1ed2:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1ed4:	4b1e      	ldr	r3, [pc, #120]	; (1f50 <set_arm_clock+0x260>)
    1ed6:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1ed8:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1eda:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    1ede:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1ee0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1ee2:	069b      	lsls	r3, r3, #26
    1ee4:	d4fc      	bmi.n	1ee0 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1ee6:	4b2a      	ldr	r3, [pc, #168]	; (1f90 <set_arm_clock+0x2a0>)
    1ee8:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1eec:	4c29      	ldr	r4, [pc, #164]	; (1f94 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1eee:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1ef0:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1ef4:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1ef6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1efa:	4c27      	ldr	r4, [pc, #156]	; (1f98 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1efc:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1f00:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1f04:	4a25      	ldr	r2, [pc, #148]	; (1f9c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    1f06:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1f08:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1f0a:	d208      	bcs.n	1f1e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1f0c:	4b11      	ldr	r3, [pc, #68]	; (1f54 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1f0e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1f12:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1f14:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1f16:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1f18:	6813      	ldr	r3, [r2, #0]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	dafc      	bge.n	1f18 <set_arm_clock+0x228>
	}

	return frequency;
}
    1f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    1f22:	2904      	cmp	r1, #4
    1f24:	f63f af6f 	bhi.w	1e06 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    1f28:	3101      	adds	r1, #1
				div_arm = 1;
    1f2a:	2201      	movs	r2, #1
    1f2c:	e75b      	b.n	1de6 <set_arm_clock+0xf6>
    1f2e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1fac <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    1f32:	236c      	movs	r3, #108	; 0x6c
    1f34:	481a      	ldr	r0, [pc, #104]	; (1fa0 <set_arm_clock+0x2b0>)
    1f36:	e776      	b.n	1e26 <set_arm_clock+0x136>
    1f38:	2512      	movs	r5, #18
    1f3a:	e706      	b.n	1d4a <set_arm_clock+0x5a>
    1f3c:	4819      	ldr	r0, [pc, #100]	; (1fa4 <set_arm_clock+0x2b4>)
    1f3e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1fb0 <set_arm_clock+0x2c0>
    1f42:	fb00 f003 	mul.w	r0, r0, r3
    1f46:	ea43 0808 	orr.w	r8, r3, r8
    1f4a:	e76c      	b.n	1e26 <set_arm_clock+0x136>
    1f4c:	1f78a400 	.word	0x1f78a400
    1f50:	400fc000 	.word	0x400fc000
    1f54:	40080000 	.word	0x40080000
    1f58:	23c34600 	.word	0x23c34600
    1f5c:	dc3cba00 	.word	0xdc3cba00
    1f60:	004cb223 	.word	0x004cb223
    1f64:	51eb851f 	.word	0x51eb851f
    1f68:	016e3600 	.word	0x016e3600
    1f6c:	400d8000 	.word	0x400d8000
    1f70:	80003040 	.word	0x80003040
    1f74:	269fb1ff 	.word	0x269fb1ff
    1f78:	005b8d80 	.word	0x005b8d80
    1f7c:	165e9f81 	.word	0x165e9f81
    1f80:	269fb200 	.word	0x269fb200
    1f84:	8001307f 	.word	0x8001307f
    1f88:	08f0d17f 	.word	0x08f0d17f
    1f8c:	00e5109f 	.word	0x00e5109f
    1f90:	431bde83 	.word	0x431bde83
    1f94:	200005f4 	.word	0x200005f4
    1f98:	200005f0 	.word	0x200005f0
    1f9c:	20000c10 	.word	0x20000c10
    1fa0:	4d3f6400 	.word	0x4d3f6400
    1fa4:	00b71b00 	.word	0x00b71b00
    1fa8:	80002036 	.word	0x80002036
    1fac:	8000206c 	.word	0x8000206c
    1fb0:	80002000 	.word	0x80002000

00001fb4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1fb4:	b4f0      	push	{r4, r5, r6, r7}
    1fb6:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1fb8:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1fba:	4637      	mov	r7, r6
    1fbc:	e000      	b.n	1fc0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1fbe:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1fc0:	fbb0 f3f2 	udiv	r3, r0, r2
    1fc4:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1fc8:	f100 0437 	add.w	r4, r0, #55	; 0x37
    1fcc:	2809      	cmp	r0, #9
    1fce:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1fd2:	b2e4      	uxtb	r4, r4
    1fd4:	bf98      	it	ls
    1fd6:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    1fd8:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1fda:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d1ed      	bne.n	1fbe <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    1fe2:	194a      	adds	r2, r1, r5
    1fe4:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    1fe6:	b14d      	cbz	r5, 1ffc <ultoa+0x48>
    1fe8:	3301      	adds	r3, #1
		t = buf[j];
    1fea:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    1fee:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1ff0:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    1ff2:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1ff4:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    1ff6:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1ffa:	dbf5      	blt.n	1fe8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    1ffc:	4608      	mov	r0, r1
    1ffe:	bcf0      	pop	{r4, r5, r6, r7}
    2000:	4770      	bx	lr
    2002:	bf00      	nop

00002004 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2004:	48a4      	ldr	r0, [pc, #656]	; (2298 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2006:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    200a:	4ba4      	ldr	r3, [pc, #656]	; (229c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    200c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    200e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    2012:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2014:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2016:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2018:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    201c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2020:	4c9f      	ldr	r4, [pc, #636]	; (22a0 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2022:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2026:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2028:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    202c:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    202e:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2030:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2034:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2038:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    203c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2040:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2044:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2048:	b280      	uxth	r0, r0
    204a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    204e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2052:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2056:	4b91      	ldr	r3, [pc, #580]	; (229c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    2058:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    205a:	2500      	movs	r5, #0
    205c:	0140      	lsls	r0, r0, #5
    205e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2060:	2904      	cmp	r1, #4
    2062:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2064:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2068:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    206a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    206c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    206e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2070:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2072:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2074:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2076:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2078:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    207a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    207c:	d1e9      	bne.n	2052 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    207e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2082:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2086:	4b87      	ldr	r3, [pc, #540]	; (22a4 <pwm_init+0x2a0>)
    2088:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    208c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    208e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2090:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2094:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2096:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    209a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    209e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    20a2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    20a6:	b280      	uxth	r0, r0
    20a8:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    20ac:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    20b0:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    20b4:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    20b8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    20bc:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    20c0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    20c4:	b280      	uxth	r0, r0
    20c6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    20ca:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    20ce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    20d2:	4b74      	ldr	r3, [pc, #464]	; (22a4 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    20d4:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    20d6:	2500      	movs	r5, #0
    20d8:	0140      	lsls	r0, r0, #5
    20da:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    20dc:	2904      	cmp	r1, #4
    20de:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20e0:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    20e2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    20e6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    20e8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    20ea:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    20ec:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    20ee:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    20f0:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    20f2:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    20f4:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    20f6:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    20f8:	d1e9      	bne.n	20ce <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    20fa:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    20fe:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2102:	4b69      	ldr	r3, [pc, #420]	; (22a8 <pwm_init+0x2a4>)
    2104:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2108:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    210a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    210c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2110:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2112:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2116:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    211a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    211e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2122:	b280      	uxth	r0, r0
    2124:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2128:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    212c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2130:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2134:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2138:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    213c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2140:	b280      	uxth	r0, r0
    2142:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2146:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    214a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    214e:	4b56      	ldr	r3, [pc, #344]	; (22a8 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    2150:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2152:	2500      	movs	r5, #0
    2154:	0140      	lsls	r0, r0, #5
    2156:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2158:	2904      	cmp	r1, #4
    215a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    215c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    215e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2162:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2164:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2166:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2168:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    216a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    216c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    216e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2170:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2172:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2174:	d1e9      	bne.n	214a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2176:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    217a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    217e:	4b4b      	ldr	r3, [pc, #300]	; (22ac <pwm_init+0x2a8>)
    2180:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2184:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2186:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2188:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    218c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    218e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2192:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2196:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    219a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    219e:	b280      	uxth	r0, r0
    21a0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    21a4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    21a8:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    21ac:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    21b0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    21b4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    21b8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    21bc:	b280      	uxth	r0, r0
    21be:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    21c2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    21c6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    21ca:	4b38      	ldr	r3, [pc, #224]	; (22ac <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    21cc:	3101      	adds	r1, #1
    21ce:	0140      	lsls	r0, r0, #5
    21d0:	461c      	mov	r4, r3
    21d2:	2904      	cmp	r1, #4
    21d4:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    21d6:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    21d8:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    21dc:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    21de:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    21e0:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    21e2:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    21e4:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    21e6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    21e8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    21ea:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    21ec:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    21ee:	d1ea      	bne.n	21c6 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    21f0:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21f4:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    21f6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21f8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    21fc:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21fe:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2202:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2204:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2208:	433b      	orrs	r3, r7
    220a:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    220e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    2212:	b29b      	uxth	r3, r3
    2214:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2218:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    221c:	0150      	lsls	r0, r2, #5
    221e:	4b24      	ldr	r3, [pc, #144]	; (22b0 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2220:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2222:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2224:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2226:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2228:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    222a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    222c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    222e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2232:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2234:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2236:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2238:	d1f0      	bne.n	221c <pwm_init+0x218>
    223a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    223c:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    223e:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2242:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2246:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2248:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    224c:	0150      	lsls	r0, r2, #5
    224e:	4b19      	ldr	r3, [pc, #100]	; (22b4 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2250:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2252:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2254:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2256:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2258:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    225a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    225c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    225e:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2260:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2262:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2264:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2266:	d1f1      	bne.n	224c <pwm_init+0x248>
    2268:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    226a:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    226c:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2270:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2274:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2276:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    227a:	0150      	lsls	r0, r2, #5
    227c:	4b0e      	ldr	r3, [pc, #56]	; (22b8 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    227e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2280:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2282:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2284:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2286:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2288:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    228a:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    228c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    228e:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2290:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2292:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2294:	d1f1      	bne.n	227a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    2296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2298:	400fc000 	.word	0x400fc000
    229c:	403dc000 	.word	0x403dc000
    22a0:	fc030000 	.word	0xfc030000
    22a4:	403e0000 	.word	0x403e0000
    22a8:	403e4000 	.word	0x403e4000
    22ac:	403e8000 	.word	0x403e8000
    22b0:	401dc000 	.word	0x401dc000
    22b4:	401e0000 	.word	0x401e0000
    22b8:	401e4000 	.word	0x401e4000

000022bc <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    22bc:	b508      	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    22be:	6803      	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    22c0:	6842      	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    22c2:	b1bb      	cbz	r3, 22f4 <sm_align_pool+0x38>
    22c4:	b17a      	cbz	r2, 22e6 <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    22c6:	4b10      	ldr	r3, [pc, #64]	; (2308 <sm_align_pool+0x4c>)
    22c8:	fba3 1302 	umull	r1, r3, r3, r2
    22cc:	08db      	lsrs	r3, r3, #3
    22ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    22d2:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    22d6:	d003      	beq.n	22e0 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    22d8:	1ad2      	subs	r2, r2, r3
    22da:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    22dc:	2af0      	cmp	r2, #240	; 0xf0
    22de:	d902      	bls.n	22e6 <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    22e0:	2301      	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    22e2:	4618      	mov	r0, r3
    22e4:	bd08      	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    22e6:	f000 f85f 	bl	23a8 <__errno>
    22ea:	221c      	movs	r2, #28
    22ec:	2300      	movs	r3, #0
    22ee:	6002      	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    22f0:	4618      	mov	r0, r3
    22f2:	bd08      	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    22f4:	4b04      	ldr	r3, [pc, #16]	; (2308 <sm_align_pool+0x4c>)
    22f6:	fba3 1302 	umull	r1, r3, r3, r2
    22fa:	08db      	lsrs	r3, r3, #3
    22fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    2300:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    2304:	d1e8      	bne.n	22d8 <sm_align_pool+0x1c>
    2306:	e7e9      	b.n	22dc <sm_align_pool+0x20>
    2308:	aaaaaaab 	.word	0xaaaaaaab

0000230c <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    230c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    230e:	4604      	mov	r4, r0
    2310:	2800      	cmp	r0, #0
    2312:	d03a      	beq.n	238a <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    2314:	b119      	cbz	r1, 231e <sm_set_pool+0x12>
    2316:	fab2 f582 	clz	r5, r2
    231a:	096d      	lsrs	r5, r5, #5
    231c:	b1fd      	cbz	r5, 235e <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    231e:	6820      	ldr	r0, [r4, #0]
    2320:	b108      	cbz	r0, 2326 <sm_set_pool+0x1a>
    2322:	6862      	ldr	r2, [r4, #4]
    2324:	b932      	cbnz	r2, 2334 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    2326:	f000 f83f 	bl	23a8 <__errno>
    232a:	2316      	movs	r3, #22
		return 0;
    232c:	2200      	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    232e:	6003      	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    2330:	4610      	mov	r0, r2
    2332:	bd70      	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    2334:	4918      	ldr	r1, [pc, #96]	; (2398 <sm_set_pool+0x8c>)
    2336:	fba1 3102 	umull	r3, r1, r1, r2
    233a:	08c9      	lsrs	r1, r1, #3
    233c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2340:	ebb2 0181 	subs.w	r1, r2, r1, lsl #2
    2344:	d1ef      	bne.n	2326 <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    2346:	68a3      	ldr	r3, [r4, #8]
    2348:	b10b      	cbz	r3, 234e <sm_set_pool+0x42>
    234a:	f000 f875 	bl	2438 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    234e:	2300      	movs	r3, #0
			return 1;
    2350:	2201      	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    2352:	6023      	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    2354:	4610      	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    2356:	6063      	str	r3, [r4, #4]
    2358:	60a3      	str	r3, [r4, #8]
    235a:	60e3      	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    235c:	bd70      	pop	{r4, r5, r6, pc}
    235e:	461e      	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    2360:	9b04      	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    2362:	e880 0006 	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    2366:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    2368:	f7ff ffa8 	bl	22bc <sm_align_pool>
    236c:	4602      	mov	r2, r0
    236e:	2800      	cmp	r0, #0
    2370:	d0de      	beq.n	2330 <sm_set_pool+0x24>

	if (do_zero) {
    2372:	b916      	cbnz	r6, 237a <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    2374:	2201      	movs	r2, #1
}
    2376:	4610      	mov	r0, r2
    2378:	bd70      	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    237a:	e894 0005 	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    237e:	60a6      	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    2380:	4629      	mov	r1, r5
    2382:	f000 f859 	bl	2438 <memset>
	}

	return 1;
    2386:	2201      	movs	r2, #1
    2388:	e7d2      	b.n	2330 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    238a:	f000 f80d 	bl	23a8 <__errno>
    238e:	2316      	movs	r3, #22
		return 0;
    2390:	4622      	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    2392:	6003      	str	r3, [r0, #0]
		return 0;
    2394:	e7cc      	b.n	2330 <sm_set_pool+0x24>
    2396:	bf00      	nop
    2398:	aaaaaaab 	.word	0xaaaaaaab

0000239c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <atoi>:
    23a0:	220a      	movs	r2, #10
    23a2:	2100      	movs	r1, #0
    23a4:	f000 b932 	b.w	260c <strtol>

000023a8 <__errno>:
    23a8:	4b01      	ldr	r3, [pc, #4]	; (23b0 <__errno+0x8>)
    23aa:	6818      	ldr	r0, [r3, #0]
    23ac:	4770      	bx	lr
    23ae:	bf00      	nop
    23b0:	20000a20 	.word	0x20000a20

000023b4 <__libc_init_array>:
    23b4:	b570      	push	{r4, r5, r6, lr}
    23b6:	4e0f      	ldr	r6, [pc, #60]	; (23f4 <__libc_init_array+0x40>)
    23b8:	4d0f      	ldr	r5, [pc, #60]	; (23f8 <__libc_init_array+0x44>)
    23ba:	1b76      	subs	r6, r6, r5
    23bc:	10b6      	asrs	r6, r6, #2
    23be:	bf18      	it	ne
    23c0:	2400      	movne	r4, #0
    23c2:	d005      	beq.n	23d0 <__libc_init_array+0x1c>
    23c4:	3401      	adds	r4, #1
    23c6:	f855 3b04 	ldr.w	r3, [r5], #4
    23ca:	4798      	blx	r3
    23cc:	42a6      	cmp	r6, r4
    23ce:	d1f9      	bne.n	23c4 <__libc_init_array+0x10>
    23d0:	4e0a      	ldr	r6, [pc, #40]	; (23fc <__libc_init_array+0x48>)
    23d2:	4d0b      	ldr	r5, [pc, #44]	; (2400 <__libc_init_array+0x4c>)
    23d4:	1b76      	subs	r6, r6, r5
    23d6:	f000 f93f 	bl	2658 <___init_veneer>
    23da:	10b6      	asrs	r6, r6, #2
    23dc:	bf18      	it	ne
    23de:	2400      	movne	r4, #0
    23e0:	d006      	beq.n	23f0 <__libc_init_array+0x3c>
    23e2:	3401      	adds	r4, #1
    23e4:	f855 3b04 	ldr.w	r3, [r5], #4
    23e8:	4798      	blx	r3
    23ea:	42a6      	cmp	r6, r4
    23ec:	d1f9      	bne.n	23e2 <__libc_init_array+0x2e>
    23ee:	bd70      	pop	{r4, r5, r6, pc}
    23f0:	bd70      	pop	{r4, r5, r6, pc}
    23f2:	bf00      	nop
    23f4:	60001a68 	.word	0x60001a68
    23f8:	60001a68 	.word	0x60001a68
    23fc:	60001a74 	.word	0x60001a74
    2400:	60001a68 	.word	0x60001a68

00002404 <__locale_ctype_ptr_l>:
    2404:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    2408:	4770      	bx	lr
    240a:	bf00      	nop

0000240c <__ascii_mbtowc>:
    240c:	b082      	sub	sp, #8
    240e:	b149      	cbz	r1, 2424 <__ascii_mbtowc+0x18>
    2410:	b15a      	cbz	r2, 242a <__ascii_mbtowc+0x1e>
    2412:	b16b      	cbz	r3, 2430 <__ascii_mbtowc+0x24>
    2414:	7813      	ldrb	r3, [r2, #0]
    2416:	600b      	str	r3, [r1, #0]
    2418:	7812      	ldrb	r2, [r2, #0]
    241a:	1c10      	adds	r0, r2, #0
    241c:	bf18      	it	ne
    241e:	2001      	movne	r0, #1
    2420:	b002      	add	sp, #8
    2422:	4770      	bx	lr
    2424:	a901      	add	r1, sp, #4
    2426:	2a00      	cmp	r2, #0
    2428:	d1f3      	bne.n	2412 <__ascii_mbtowc+0x6>
    242a:	4610      	mov	r0, r2
    242c:	b002      	add	sp, #8
    242e:	4770      	bx	lr
    2430:	f06f 0001 	mvn.w	r0, #1
    2434:	e7f4      	b.n	2420 <__ascii_mbtowc+0x14>
    2436:	bf00      	nop

00002438 <memset>:
    2438:	b470      	push	{r4, r5, r6}
    243a:	0784      	lsls	r4, r0, #30
    243c:	d046      	beq.n	24cc <memset+0x94>
    243e:	1e54      	subs	r4, r2, #1
    2440:	2a00      	cmp	r2, #0
    2442:	d041      	beq.n	24c8 <memset+0x90>
    2444:	b2cd      	uxtb	r5, r1
    2446:	4603      	mov	r3, r0
    2448:	e002      	b.n	2450 <memset+0x18>
    244a:	1e62      	subs	r2, r4, #1
    244c:	b3e4      	cbz	r4, 24c8 <memset+0x90>
    244e:	4614      	mov	r4, r2
    2450:	f803 5b01 	strb.w	r5, [r3], #1
    2454:	079a      	lsls	r2, r3, #30
    2456:	d1f8      	bne.n	244a <memset+0x12>
    2458:	2c03      	cmp	r4, #3
    245a:	d92e      	bls.n	24ba <memset+0x82>
    245c:	b2cd      	uxtb	r5, r1
    245e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2462:	2c0f      	cmp	r4, #15
    2464:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    2468:	d919      	bls.n	249e <memset+0x66>
    246a:	f103 0210 	add.w	r2, r3, #16
    246e:	4626      	mov	r6, r4
    2470:	3e10      	subs	r6, #16
    2472:	2e0f      	cmp	r6, #15
    2474:	f842 5c10 	str.w	r5, [r2, #-16]
    2478:	f842 5c0c 	str.w	r5, [r2, #-12]
    247c:	f842 5c08 	str.w	r5, [r2, #-8]
    2480:	f842 5c04 	str.w	r5, [r2, #-4]
    2484:	f102 0210 	add.w	r2, r2, #16
    2488:	d8f2      	bhi.n	2470 <memset+0x38>
    248a:	f1a4 0210 	sub.w	r2, r4, #16
    248e:	f022 020f 	bic.w	r2, r2, #15
    2492:	f004 040f 	and.w	r4, r4, #15
    2496:	3210      	adds	r2, #16
    2498:	2c03      	cmp	r4, #3
    249a:	4413      	add	r3, r2
    249c:	d90d      	bls.n	24ba <memset+0x82>
    249e:	461e      	mov	r6, r3
    24a0:	4622      	mov	r2, r4
    24a2:	3a04      	subs	r2, #4
    24a4:	2a03      	cmp	r2, #3
    24a6:	f846 5b04 	str.w	r5, [r6], #4
    24aa:	d8fa      	bhi.n	24a2 <memset+0x6a>
    24ac:	1f22      	subs	r2, r4, #4
    24ae:	f022 0203 	bic.w	r2, r2, #3
    24b2:	3204      	adds	r2, #4
    24b4:	4413      	add	r3, r2
    24b6:	f004 0403 	and.w	r4, r4, #3
    24ba:	b12c      	cbz	r4, 24c8 <memset+0x90>
    24bc:	b2c9      	uxtb	r1, r1
    24be:	441c      	add	r4, r3
    24c0:	f803 1b01 	strb.w	r1, [r3], #1
    24c4:	42a3      	cmp	r3, r4
    24c6:	d1fb      	bne.n	24c0 <memset+0x88>
    24c8:	bc70      	pop	{r4, r5, r6}
    24ca:	4770      	bx	lr
    24cc:	4614      	mov	r4, r2
    24ce:	4603      	mov	r3, r0
    24d0:	e7c2      	b.n	2458 <memset+0x20>
    24d2:	bf00      	nop

000024d4 <_strtol_l.isra.0>:
    24d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    24dc:	460f      	mov	r7, r1
    24de:	4680      	mov	r8, r0
    24e0:	4616      	mov	r6, r2
    24e2:	461d      	mov	r5, r3
    24e4:	468b      	mov	fp, r1
    24e6:	e000      	b.n	24ea <_strtol_l.isra.0+0x16>
    24e8:	46a3      	mov	fp, r4
    24ea:	465c      	mov	r4, fp
    24ec:	4648      	mov	r0, r9
    24ee:	f814 ab01 	ldrb.w	sl, [r4], #1
    24f2:	f7ff ff87 	bl	2404 <__locale_ctype_ptr_l>
    24f6:	4450      	add	r0, sl
    24f8:	7841      	ldrb	r1, [r0, #1]
    24fa:	f001 0108 	and.w	r1, r1, #8
    24fe:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    2502:	2900      	cmp	r1, #0
    2504:	d1f0      	bne.n	24e8 <_strtol_l.isra.0+0x14>
    2506:	4652      	mov	r2, sl
    2508:	2a2d      	cmp	r2, #45	; 0x2d
    250a:	d061      	beq.n	25d0 <_strtol_l.isra.0+0xfc>
    250c:	2a2b      	cmp	r2, #43	; 0x2b
    250e:	bf04      	itt	eq
    2510:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    2514:	f10b 0402 	addeq.w	r4, fp, #2
    2518:	2d00      	cmp	r5, #0
    251a:	d043      	beq.n	25a4 <_strtol_l.isra.0+0xd0>
    251c:	2d10      	cmp	r5, #16
    251e:	d065      	beq.n	25ec <_strtol_l.isra.0+0x118>
    2520:	46a9      	mov	r9, r5
    2522:	f1bc 0f00 	cmp.w	ip, #0
    2526:	bf0c      	ite	eq
    2528:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    252c:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    2530:	2100      	movs	r1, #0
    2532:	fbba fef9 	udiv	lr, sl, r9
    2536:	4608      	mov	r0, r1
    2538:	fb09 aa1e 	mls	sl, r9, lr, sl
    253c:	e005      	b.n	254a <_strtol_l.isra.0+0x76>
    253e:	d029      	beq.n	2594 <_strtol_l.isra.0+0xc0>
    2540:	fb09 3000 	mla	r0, r9, r0, r3
    2544:	2101      	movs	r1, #1
    2546:	f814 2b01 	ldrb.w	r2, [r4], #1
    254a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    254e:	2b09      	cmp	r3, #9
    2550:	d905      	bls.n	255e <_strtol_l.isra.0+0x8a>
    2552:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    2556:	2b19      	cmp	r3, #25
    2558:	d80a      	bhi.n	2570 <_strtol_l.isra.0+0x9c>
    255a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    255e:	429d      	cmp	r5, r3
    2560:	dd0e      	ble.n	2580 <_strtol_l.isra.0+0xac>
    2562:	1c4a      	adds	r2, r1, #1
    2564:	d0ef      	beq.n	2546 <_strtol_l.isra.0+0x72>
    2566:	4586      	cmp	lr, r0
    2568:	d2e9      	bcs.n	253e <_strtol_l.isra.0+0x6a>
    256a:	f04f 31ff 	mov.w	r1, #4294967295
    256e:	e7ea      	b.n	2546 <_strtol_l.isra.0+0x72>
    2570:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    2574:	2b19      	cmp	r3, #25
    2576:	d803      	bhi.n	2580 <_strtol_l.isra.0+0xac>
    2578:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    257c:	429d      	cmp	r5, r3
    257e:	dcf0      	bgt.n	2562 <_strtol_l.isra.0+0x8e>
    2580:	1c4b      	adds	r3, r1, #1
    2582:	d015      	beq.n	25b0 <_strtol_l.isra.0+0xdc>
    2584:	f1bc 0f00 	cmp.w	ip, #0
    2588:	d110      	bne.n	25ac <_strtol_l.isra.0+0xd8>
    258a:	b14e      	cbz	r6, 25a0 <_strtol_l.isra.0+0xcc>
    258c:	b9e1      	cbnz	r1, 25c8 <_strtol_l.isra.0+0xf4>
    258e:	6037      	str	r7, [r6, #0]
    2590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2594:	459a      	cmp	sl, r3
    2596:	dad3      	bge.n	2540 <_strtol_l.isra.0+0x6c>
    2598:	4670      	mov	r0, lr
    259a:	f04f 31ff 	mov.w	r1, #4294967295
    259e:	e7d2      	b.n	2546 <_strtol_l.isra.0+0x72>
    25a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25a4:	2a30      	cmp	r2, #48	; 0x30
    25a6:	d01a      	beq.n	25de <_strtol_l.isra.0+0x10a>
    25a8:	250a      	movs	r5, #10
    25aa:	e7b9      	b.n	2520 <_strtol_l.isra.0+0x4c>
    25ac:	4240      	negs	r0, r0
    25ae:	e7ec      	b.n	258a <_strtol_l.isra.0+0xb6>
    25b0:	f1bc 0f00 	cmp.w	ip, #0
    25b4:	f04f 0322 	mov.w	r3, #34	; 0x22
    25b8:	bf0c      	ite	eq
    25ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    25be:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    25c2:	f8c8 3000 	str.w	r3, [r8]
    25c6:	b1f6      	cbz	r6, 2606 <_strtol_l.isra.0+0x132>
    25c8:	1e67      	subs	r7, r4, #1
    25ca:	6037      	str	r7, [r6, #0]
    25cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25d0:	f10b 0402 	add.w	r4, fp, #2
    25d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
    25d8:	f04f 0c01 	mov.w	ip, #1
    25dc:	e79c      	b.n	2518 <_strtol_l.isra.0+0x44>
    25de:	7823      	ldrb	r3, [r4, #0]
    25e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    25e4:	2b58      	cmp	r3, #88	; 0x58
    25e6:	d008      	beq.n	25fa <_strtol_l.isra.0+0x126>
    25e8:	2508      	movs	r5, #8
    25ea:	e799      	b.n	2520 <_strtol_l.isra.0+0x4c>
    25ec:	2a30      	cmp	r2, #48	; 0x30
    25ee:	d197      	bne.n	2520 <_strtol_l.isra.0+0x4c>
    25f0:	7823      	ldrb	r3, [r4, #0]
    25f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    25f6:	2b58      	cmp	r3, #88	; 0x58
    25f8:	d192      	bne.n	2520 <_strtol_l.isra.0+0x4c>
    25fa:	f04f 0910 	mov.w	r9, #16
    25fe:	7862      	ldrb	r2, [r4, #1]
    2600:	464d      	mov	r5, r9
    2602:	3402      	adds	r4, #2
    2604:	e78d      	b.n	2522 <_strtol_l.isra.0+0x4e>
    2606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    260a:	bf00      	nop

0000260c <strtol>:
    260c:	b530      	push	{r4, r5, lr}
    260e:	4c08      	ldr	r4, [pc, #32]	; (2630 <strtol+0x24>)
    2610:	4b08      	ldr	r3, [pc, #32]	; (2634 <strtol+0x28>)
    2612:	6825      	ldr	r5, [r4, #0]
    2614:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    2616:	b083      	sub	sp, #12
    2618:	2c00      	cmp	r4, #0
    261a:	bf08      	it	eq
    261c:	461c      	moveq	r4, r3
    261e:	9400      	str	r4, [sp, #0]
    2620:	4613      	mov	r3, r2
    2622:	460a      	mov	r2, r1
    2624:	4601      	mov	r1, r0
    2626:	4628      	mov	r0, r5
    2628:	f7ff ff54 	bl	24d4 <_strtol_l.isra.0>
    262c:	b003      	add	sp, #12
    262e:	bd30      	pop	{r4, r5, pc}
    2630:	20000a20 	.word	0x20000a20
    2634:	20000a24 	.word	0x20000a24

00002638 <__ascii_wctomb>:
    2638:	b121      	cbz	r1, 2644 <__ascii_wctomb+0xc>
    263a:	2aff      	cmp	r2, #255	; 0xff
    263c:	d804      	bhi.n	2648 <__ascii_wctomb+0x10>
    263e:	700a      	strb	r2, [r1, #0]
    2640:	2001      	movs	r0, #1
    2642:	4770      	bx	lr
    2644:	4608      	mov	r0, r1
    2646:	4770      	bx	lr
    2648:	238a      	movs	r3, #138	; 0x8a
    264a:	6003      	str	r3, [r0, #0]
    264c:	f04f 30ff 	mov.w	r0, #4294967295
    2650:	4770      	bx	lr
    2652:	bf00      	nop
    2654:	0000      	movs	r0, r0
	...

00002658 <___init_veneer>:
    2658:	f85f f000 	ldr.w	pc, [pc]	; 265c <___init_veneer+0x4>
    265c:	60001a09 	.word	0x60001a09

Disassembly of section .fini:

00002660 <_fini>:
    2660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2662:	bf00      	nop

Disassembly of section .text.csf:

60004d40 <_heap_end+0x3fd84d40>:
60004d40:	ffffffff 	.word	0xffffffff
60004d44:	ffffffff 	.word	0xffffffff
60004d48:	ffffffff 	.word	0xffffffff
60004d4c:	ffffffff 	.word	0xffffffff
60004d50:	ffffffff 	.word	0xffffffff
60004d54:	ffffffff 	.word	0xffffffff
60004d58:	ffffffff 	.word	0xffffffff
60004d5c:	ffffffff 	.word	0xffffffff
60004d60:	ffffffff 	.word	0xffffffff
60004d64:	ffffffff 	.word	0xffffffff
60004d68:	ffffffff 	.word	0xffffffff
60004d6c:	ffffffff 	.word	0xffffffff
60004d70:	ffffffff 	.word	0xffffffff
60004d74:	ffffffff 	.word	0xffffffff
60004d78:	ffffffff 	.word	0xffffffff
60004d7c:	ffffffff 	.word	0xffffffff
60004d80:	ffffffff 	.word	0xffffffff
60004d84:	ffffffff 	.word	0xffffffff
60004d88:	ffffffff 	.word	0xffffffff
60004d8c:	ffffffff 	.word	0xffffffff
60004d90:	ffffffff 	.word	0xffffffff
60004d94:	ffffffff 	.word	0xffffffff
60004d98:	ffffffff 	.word	0xffffffff
60004d9c:	ffffffff 	.word	0xffffffff
60004da0:	ffffffff 	.word	0xffffffff
60004da4:	ffffffff 	.word	0xffffffff
60004da8:	ffffffff 	.word	0xffffffff
60004dac:	ffffffff 	.word	0xffffffff
60004db0:	ffffffff 	.word	0xffffffff
60004db4:	ffffffff 	.word	0xffffffff
60004db8:	ffffffff 	.word	0xffffffff
60004dbc:	ffffffff 	.word	0xffffffff
60004dc0:	ffffffff 	.word	0xffffffff
60004dc4:	ffffffff 	.word	0xffffffff
60004dc8:	ffffffff 	.word	0xffffffff
60004dcc:	ffffffff 	.word	0xffffffff
60004dd0:	ffffffff 	.word	0xffffffff
60004dd4:	ffffffff 	.word	0xffffffff
60004dd8:	ffffffff 	.word	0xffffffff
60004ddc:	ffffffff 	.word	0xffffffff
60004de0:	ffffffff 	.word	0xffffffff
60004de4:	ffffffff 	.word	0xffffffff
60004de8:	ffffffff 	.word	0xffffffff
60004dec:	ffffffff 	.word	0xffffffff
60004df0:	ffffffff 	.word	0xffffffff
60004df4:	ffffffff 	.word	0xffffffff
60004df8:	ffffffff 	.word	0xffffffff
60004dfc:	ffffffff 	.word	0xffffffff
60004e00:	ffffffff 	.word	0xffffffff
60004e04:	ffffffff 	.word	0xffffffff
60004e08:	ffffffff 	.word	0xffffffff
60004e0c:	ffffffff 	.word	0xffffffff
60004e10:	ffffffff 	.word	0xffffffff
60004e14:	ffffffff 	.word	0xffffffff
60004e18:	ffffffff 	.word	0xffffffff
60004e1c:	ffffffff 	.word	0xffffffff
60004e20:	ffffffff 	.word	0xffffffff
60004e24:	ffffffff 	.word	0xffffffff
60004e28:	ffffffff 	.word	0xffffffff
60004e2c:	ffffffff 	.word	0xffffffff
60004e30:	ffffffff 	.word	0xffffffff
60004e34:	ffffffff 	.word	0xffffffff
60004e38:	ffffffff 	.word	0xffffffff
60004e3c:	ffffffff 	.word	0xffffffff
60004e40:	ffffffff 	.word	0xffffffff
60004e44:	ffffffff 	.word	0xffffffff
60004e48:	ffffffff 	.word	0xffffffff
60004e4c:	ffffffff 	.word	0xffffffff
60004e50:	ffffffff 	.word	0xffffffff
60004e54:	ffffffff 	.word	0xffffffff
60004e58:	ffffffff 	.word	0xffffffff
60004e5c:	ffffffff 	.word	0xffffffff
60004e60:	ffffffff 	.word	0xffffffff
60004e64:	ffffffff 	.word	0xffffffff
60004e68:	ffffffff 	.word	0xffffffff
60004e6c:	ffffffff 	.word	0xffffffff
60004e70:	ffffffff 	.word	0xffffffff
60004e74:	ffffffff 	.word	0xffffffff
60004e78:	ffffffff 	.word	0xffffffff
60004e7c:	ffffffff 	.word	0xffffffff
60004e80:	ffffffff 	.word	0xffffffff
60004e84:	ffffffff 	.word	0xffffffff
60004e88:	ffffffff 	.word	0xffffffff
60004e8c:	ffffffff 	.word	0xffffffff
60004e90:	ffffffff 	.word	0xffffffff
60004e94:	ffffffff 	.word	0xffffffff
60004e98:	ffffffff 	.word	0xffffffff
60004e9c:	ffffffff 	.word	0xffffffff
60004ea0:	ffffffff 	.word	0xffffffff
60004ea4:	ffffffff 	.word	0xffffffff
60004ea8:	ffffffff 	.word	0xffffffff
60004eac:	ffffffff 	.word	0xffffffff
60004eb0:	ffffffff 	.word	0xffffffff
60004eb4:	ffffffff 	.word	0xffffffff
60004eb8:	ffffffff 	.word	0xffffffff
60004ebc:	ffffffff 	.word	0xffffffff
60004ec0:	ffffffff 	.word	0xffffffff
60004ec4:	ffffffff 	.word	0xffffffff
60004ec8:	ffffffff 	.word	0xffffffff
60004ecc:	ffffffff 	.word	0xffffffff
60004ed0:	ffffffff 	.word	0xffffffff
60004ed4:	ffffffff 	.word	0xffffffff
60004ed8:	ffffffff 	.word	0xffffffff
60004edc:	ffffffff 	.word	0xffffffff
60004ee0:	ffffffff 	.word	0xffffffff
60004ee4:	ffffffff 	.word	0xffffffff
60004ee8:	ffffffff 	.word	0xffffffff
60004eec:	ffffffff 	.word	0xffffffff
60004ef0:	ffffffff 	.word	0xffffffff
60004ef4:	ffffffff 	.word	0xffffffff
60004ef8:	ffffffff 	.word	0xffffffff
60004efc:	ffffffff 	.word	0xffffffff
60004f00:	ffffffff 	.word	0xffffffff
60004f04:	ffffffff 	.word	0xffffffff
60004f08:	ffffffff 	.word	0xffffffff
60004f0c:	ffffffff 	.word	0xffffffff
60004f10:	ffffffff 	.word	0xffffffff
60004f14:	ffffffff 	.word	0xffffffff
60004f18:	ffffffff 	.word	0xffffffff
60004f1c:	ffffffff 	.word	0xffffffff
60004f20:	ffffffff 	.word	0xffffffff
60004f24:	ffffffff 	.word	0xffffffff
60004f28:	ffffffff 	.word	0xffffffff
60004f2c:	ffffffff 	.word	0xffffffff
60004f30:	ffffffff 	.word	0xffffffff
60004f34:	ffffffff 	.word	0xffffffff
60004f38:	ffffffff 	.word	0xffffffff
60004f3c:	ffffffff 	.word	0xffffffff
60004f40:	ffffffff 	.word	0xffffffff
60004f44:	ffffffff 	.word	0xffffffff
60004f48:	ffffffff 	.word	0xffffffff
60004f4c:	ffffffff 	.word	0xffffffff
60004f50:	ffffffff 	.word	0xffffffff
60004f54:	ffffffff 	.word	0xffffffff
60004f58:	ffffffff 	.word	0xffffffff
60004f5c:	ffffffff 	.word	0xffffffff
60004f60:	ffffffff 	.word	0xffffffff
60004f64:	ffffffff 	.word	0xffffffff
60004f68:	ffffffff 	.word	0xffffffff
60004f6c:	ffffffff 	.word	0xffffffff
60004f70:	ffffffff 	.word	0xffffffff
60004f74:	ffffffff 	.word	0xffffffff
60004f78:	ffffffff 	.word	0xffffffff
60004f7c:	ffffffff 	.word	0xffffffff
60004f80:	ffffffff 	.word	0xffffffff
60004f84:	ffffffff 	.word	0xffffffff
60004f88:	ffffffff 	.word	0xffffffff
60004f8c:	ffffffff 	.word	0xffffffff
60004f90:	ffffffff 	.word	0xffffffff
60004f94:	ffffffff 	.word	0xffffffff
60004f98:	ffffffff 	.word	0xffffffff
60004f9c:	ffffffff 	.word	0xffffffff
60004fa0:	ffffffff 	.word	0xffffffff
60004fa4:	ffffffff 	.word	0xffffffff
60004fa8:	ffffffff 	.word	0xffffffff
60004fac:	ffffffff 	.word	0xffffffff
60004fb0:	ffffffff 	.word	0xffffffff
60004fb4:	ffffffff 	.word	0xffffffff
60004fb8:	ffffffff 	.word	0xffffffff
60004fbc:	ffffffff 	.word	0xffffffff
60004fc0:	ffffffff 	.word	0xffffffff
60004fc4:	ffffffff 	.word	0xffffffff
60004fc8:	ffffffff 	.word	0xffffffff
60004fcc:	ffffffff 	.word	0xffffffff
60004fd0:	ffffffff 	.word	0xffffffff
60004fd4:	ffffffff 	.word	0xffffffff
60004fd8:	ffffffff 	.word	0xffffffff
60004fdc:	ffffffff 	.word	0xffffffff
60004fe0:	ffffffff 	.word	0xffffffff
60004fe4:	ffffffff 	.word	0xffffffff
60004fe8:	ffffffff 	.word	0xffffffff
60004fec:	ffffffff 	.word	0xffffffff
60004ff0:	ffffffff 	.word	0xffffffff
60004ff4:	ffffffff 	.word	0xffffffff
60004ff8:	ffffffff 	.word	0xffffffff
60004ffc:	ffffffff 	.word	0xffffffff

60005000 <hab_csf>:
	...
